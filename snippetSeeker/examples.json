[["Python Tutorial: Example", "print(\"Hello, World!\")"], ["Python Introduction: Example", "print(\"Hello, World!\")"], ["Python Getting Started: helloworld.p", "print(\"Hello, World!\")"], ["Python Syntax: Example", "if 5 > 2:\u00a0\nprint(\"Five is greater than two!\")"], ["Python Syntax: Example", "if 5 > 2:\u00a0print(\"Five is greater than two!\")\u00a0\nif 5 > 2:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 print(\"Five is greater than two!\")"], ["Python Syntax: Variables in Python", "x = 5y = \"Hello, World!\""], ["Python Syntax: Comments in Python", "#This is a comment.\nprint(\"Hello, World!\")"], ["Python Comments: Example", "#This is a comment\nprint(\"Hello, World!\")"], ["Python Comments: Example", "print(\"Hello, World!\") #This is a comment"], ["Python Comments: Example", "#print(\"Hello, World!\")print(\"Cheers, Mate!\")"], ["Python Comments: Example", "#This is a comment#written in#more than just one lineprint(\"Hello, \n  World!\")"], ["Python Comments: Example", "\"\"\"This is a commentwritten in more than just \n  one line\"\"\"print(\"Hello, World!\")"], ["Python Variables: Example", "x = 5\ny = \"John\"\nprint(x)\nprint(y)"], ["Python Variables: Example", "x = 4\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # x is of type int\nx = \"Sally\" # x is now of type str\nprint(x)"], ["Python Variables: Example", "x = \n  str(3)\u00a0\u00a0\u00a0 # x will be '3'y = int(3)\u00a0\u00a0\u00a0 # y \n  will be 3z = float(3)\u00a0 # z will be 3.0"], ["Python Variables: Example", "x = 5y = \"John\"print(type(x))print(type(y))"], ["Python Variables: Example", "x = \"John\"# is the same asx = \n  'John'"], ["Python Variables: This will create two variables", "a = 4A = \n  \"Sally\"#A will not overwrite a"], ["Python Variables: Example", "x = 5\ny = \"John\"\nprint(x)\nprint(y)"], ["Python Variables: Example", "x = 4\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 # x is of type int\nx = \"Sally\" # x is now of type str\nprint(x)"], ["Python Variables: Example", "x = \n  str(3)\u00a0\u00a0\u00a0 # x will be '3'y = int(3)\u00a0\u00a0\u00a0 # y \n  will be 3z = float(3)\u00a0 # z will be 3.0"], ["Python Variables: Example", "x = 5y = \"John\"print(type(x))print(type(y))"], ["Python Variables: Example", "x = \"John\"# is the same asx = \n  'John'"], ["Python Variables: This will create two variables", "a = 4A = \n  \"Sally\"#A will not overwrite a"], ["Python - Variable Names: Legal variable names", "myvar = \"John\"my_var = \"John\"_my_var = \"John\"myVar = \"John\"\n  MYVAR = \"John\"myvar2 = \"John\""], ["Python Variables - Assign Multiple Values: Example", "x, y, z = \"Orange\", \"Banana\", \"Cherry\"print(x)print(y)print(z)"], ["Python Variables - Assign Multiple Values: Example", "x = y = z = \"Orange\"print(x)print(y)print(z)"], ["Python Variables - Assign Multiple Values: Unpack a list", "fruits = [\"apple\", \"banana\", \"cherry\"]\nx, y, z = fruits\nprint(x)\nprint(y)\nprint(z)"], ["Python - Output Variables: Example", "x = \"Python is awesome\"\nprint(x)"], ["Python - Output Variables: Example", "x = \"Python\"y = \"is\"z = \"awesome\"print(x, y, z)"], ["Python - Output Variables: Example", "x = \"Python \"y = \"is \"z = \"awesome\"print(x \n  + y + z)"], ["Python - Output Variables: Example", "x = 5y = 10print(x + y)"], ["Python - Output Variables: Example", "x = 5y = \"John\"print(x, y)"], ["Python - Global Variables: Create a variable outside of a function, and use it inside the functio", "x = \"awesome\"\n  def myfunc():\u00a0 print(\"Python is \" + x)myfunc()"], ["Python - Global Variables: Create a variable inside a function, with the same name as the global \n  variabl", "x = \"awesome\"\n  def myfunc():\u00a0 x = \"fantastic\"\u00a0 print(\"Python is \" + x)myfunc()\nprint(\"Python is \" + x)"], ["Python - Global Variables: If you use the global keyword, the variable belongs to the global scope", "def myfunc():\u00a0 global x\u00a0 x = \"fantastic\"myfunc()\nprint(\"Python is \" + x)"], ["Python - Global Variables: To change the value of a global variable inside a function, refer to the \n  variable by using the global keyword", "x = \"awesome\"def myfunc():\u00a0 global x\u00a0 x = \"fantastic\"myfunc()\nprint(\"Python is \" + x)"], ["Python Data Types: Print the data type of the variable x", "x = 5\nprint(type(x))"], ["Python Numbers: Example", "x = 1\u00a0\u00a0\u00a0 \n  # inty = 2.8\u00a0 # floatz = 1j\u00a0\u00a0 # complex"], ["Python Numbers: Example", "print(type(x))print(type(y))print(type(z))"], ["Python Numbers: Integers", "x = 1y = 35656222554887711z = \n  -3255522print(type(x))print(type(y))print(type(z))"], ["Python Numbers: Floats", "x = 1.10y = 1.0z = -35.59print(type(x))print(type(y))print(type(z))"], ["Python Numbers: Floats", "x = 35e3y = 12E4z = -87.7e100print(type(x))print(type(y))\n  print(type(z))"], ["Python Numbers: Complex", "x = 3+5jy = 5jz = -5jprint(type(x))print(type(y))\n  print(type(z))"], ["Python Numbers: Convert from one type to another", "x = 1\u00a0\u00a0\u00a0 # inty = 2.8\u00a0 # floatz = 1j\u00a0\u00a0 # complex#convert from int to float:\n  a = float(x)#convert from float to int:\n  b = int(y)#convert from int to complex:c = complex(x)print(a)print(b)\n  print(c)print(type(a))print(type(b))\n  print(type(c))"], ["Python Numbers: Import the random module, and display a random number between 1 and 9", "import randomprint(random.randrange(1, 10))"], ["Python Casting: Integers", "x = int(1)\u00a0\u00a0 # x will be 1\ny = int(2.8) # y will be 2\nz = int(\"3\") # z will be 3"], ["Python Casting: Floats", "x = float(1)\u00a0\u00a0\u00a0\u00a0 # x will be 1.0\ny = float(2.8)\u00a0\u00a0 # y will be 2.8\nz = float(\"3\")\u00a0\u00a0 # z will be 3.0\nw = float(\"4.2\") # w will be 4.2"], ["Python Casting: Strings", "x = str(\"s1\") # x will be 's1'\ny = str(2)\u00a0\u00a0\u00a0 # y will be '2'\nz = str(3.0)\u00a0 # z will be '3.0'"], ["Python Strings: Example", "print(\"Hello\")\nprint('Hello')"], ["Python Strings: Example", "a = \"Hello\"print(a)"], ["Python Strings: You can use three double quotes", "a = \"\"\"Lorem ipsum dolor sit amet,consectetur adipiscing elit,sed do \n  eiusmod tempor incididuntut labore et dolore magna aliqua.\"\"\"print(a)"], ["Python Strings: Example", "a = '''Lorem ipsum dolor sit amet,consectetur adipiscing elit,sed do \n  eiusmod tempor incididuntut labore et dolore magna aliqua.'''print(a)"], ["Python Strings: Get the character at position 1 (remember that the first character has the \nposition 0)", "a = \"Hello, World!\"\nprint(a[1])"], ["Python Strings: Loop through the letters in the word \"banana\"", "for x in \"banana\":\u00a0 print(x)"], ["Python Strings: The len() function returns the length of a string", "a = \"Hello, World!\"\nprint(len(a))"], ["Python Strings: Check if \"free\" is present in the following text", "txt = \"The best things in life are free!\"print(\"free\" in txt)"], ["Python Strings: Print only if \"free\" is present", "txt = \"The best things in life are free!\"if \"free\" in txt:\u00a0\nprint(\"Yes, 'free' is present.\")"], ["Python Strings: Check if \"expensive\" is NOT present in the following text", "txt = \"The best things in life are free!\"print(\"expensive\" not in txt)"], ["Python Strings: print only if \"expensive\" is NOT present", "txt = \"The best things in life are free!\"if \"expensive\" not in txt:\u00a0\nprint(\"No, 'expensive' is NOT present.\")"], ["Python Strings: Example", "print(\"Hello\")\nprint('Hello')"], ["Python Strings: Example", "a = \"Hello\"print(a)"], ["Python Strings: You can use three double quotes", "a = \"\"\"Lorem ipsum dolor sit amet,consectetur adipiscing elit,sed do \n  eiusmod tempor incididuntut labore et dolore magna aliqua.\"\"\"print(a)"], ["Python Strings: Example", "a = '''Lorem ipsum dolor sit amet,consectetur adipiscing elit,sed do \n  eiusmod tempor incididuntut labore et dolore magna aliqua.'''print(a)"], ["Python Strings: Get the character at position 1 (remember that the first character has the \nposition 0)", "a = \"Hello, World!\"\nprint(a[1])"], ["Python Strings: Loop through the letters in the word \"banana\"", "for x in \"banana\":\u00a0 print(x)"], ["Python Strings: The len() function returns the length of a string", "a = \"Hello, World!\"\nprint(len(a))"], ["Python Strings: Check if \"free\" is present in the following text", "txt = \"The best things in life are free!\"print(\"free\" in txt)"], ["Python Strings: Print only if \"free\" is present", "txt = \"The best things in life are free!\"if \"free\" in txt:\u00a0\nprint(\"Yes, 'free' is present.\")"], ["Python Strings: Check if \"expensive\" is NOT present in the following text", "txt = \"The best things in life are free!\"print(\"expensive\" not in txt)"], ["Python Strings: print only if \"expensive\" is NOT present", "txt = \"The best things in life are free!\"if \"expensive\" not in txt:\u00a0\nprint(\"No, 'expensive' is NOT present.\")"], ["Python - Slicing Strings: Get the characters from position 2 to position 5 (not included)", "b = \"Hello, World!\"\n  print(b[2:5])"], ["Python - Slicing Strings: Get the characters from the start to position 5 (not included)", "b = \"Hello, World!\"\n  print(b[:5])"], ["Python - Slicing Strings: Get the characters from position 2, and all the way to the end", "b = \"Hello, World!\"\n  print(b[2:])"], ["Python - Slicing Strings: Get the characters", "b = \"Hello, World!\"\n  print(b[-5:-2])"], ["Python - Modify Strings: The upper() method returns the string in upper case", "a = \"Hello, World!\"\nprint(a.upper())"], ["Python - Modify Strings: The lower() method returns the string in lower case", "a = \"Hello, World!\"\nprint(a.lower())"], ["Python - Modify Strings: The strip() method removes any whitespace from the beginning or the end", "a = \" Hello, World! \"\nprint(a.strip()) # returns \"Hello, World!\""], ["Python - Modify Strings: The replace() method replaces a string with another string", "a = \"Hello, World!\"\nprint(a.replace(\"H\", \"J\"))"], ["Python - Modify Strings: The split() method splits the string into substrings if it finds instances of the separator", "a = \"Hello, World!\"\nprint(a.split(\",\")) # \n  returns ['Hello', ' World!']"], ["Python - String Concatenation: Merge variable a with variable \nb into variable c", "a = \"Hello\"b = \"World\"c = a + b\nprint(c)"], ["Python - String Concatenation: To add a space between them, add a \" \"", "a = \"Hello\"b = \"World\"c = a + \" \" + b\nprint(c)"], ["Python - Format - Strings: Use the format() method to insert numbers \ninto strings", "age = 36txt = \"My name is John, and I am {}\"print(txt.format(age))"], ["Python - Format - Strings: Example", "quantity = 3itemno = 567price = 49.95myorder = \"I want {} \n  pieces of item {} for {} dollars.\"print(myorder.format(quantity, \n  itemno, price))"], ["Python - Format - Strings: Example", "quantity = 3itemno = 567price = 49.95myorder = \"I want to pay {2} \n  dollars for {0} pieces of item {1}.\"print(myorder.format(quantity, \n  itemno, price))"], ["Python - Escape Characters: The escape character allows you to use double quotes when you normally would not be allowed", "txt = \"We are the so-called \\\"Vikings\\\" from the north.\""], ["Python Booleans: Example", "print(10 > 9)print(10 == 9)print(10 < 9)"], ["Python Booleans: Print a message based on whether the condition is True or \n  False", "a = 200b = 33if b > a:\u00a0 print(\"b is greater than a\")\n  else:\u00a0 print(\"b is not greater than a\")"], ["Python Booleans: Evaluate a string and a number", "print(bool(\"Hello\"))print(bool(15))"], ["Python Booleans: Evaluate two variables", "x = \"Hello\"y = 15print(bool(x))print(bool(y))"], ["Python Booleans: The following will return True", "bool(\"abc\")bool(123)bool([\"apple\", \"cherry\", \"banana\"])"], ["Python Booleans: The following will return False", "bool(False)bool(None)bool(0)bool(\"\")bool(())bool([])\n  bool({})"], ["Python Booleans: Example", "class myclass():\u00a0 def __len__(self):\u00a0\u00a0\u00a0 return 0\nmyobj = myclass()print(bool(myobj))"], ["Python Booleans: Print the answer of a function", "def myFunction() :\u00a0 return Trueprint(myFunction())"], ["Python Booleans: Print \"YES!\" if the function returns True, otherwise print \"NO!\"", "def myFunction() :\u00a0 return Trueif myFunction():\u00a0 \n  print(\"YES!\")else:\u00a0 print(\"NO!\")"], ["Python Booleans: Check if an object is an integer or not", "x = 200print(isinstance(x, int))"], ["Python Operators: Example", "print(10 + 5)"], ["Python Operators: Parentheses has the highest precedence, meaning that expressions inside \nparentheses must be evaluated first", "print((6 + 3) - (6 + 3))"], ["Python Operators: Multiplication * has higher precedence than\naddition +, and therefor multiplications are \nevaluated before additions", "print(100 + 5 * 3)"], ["Python Operators: Addition + and\nsubtraction - has the same precedence, and therefor\nwe evaluate the expression from left to right", "print(5 + 4 - 7 + 3)"], ["Python Lists: Create a List", "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist)"], ["Python Lists: Lists allow duplicate values", "thislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\nprint(thislist)"], ["Python Lists: Print the number of items in the list", "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(len(thislist))"], ["Python Lists: String, int and boolean data types", "list1 = [\"apple\", \"banana\", \"cherry\"]\nlist2 = [1, 5, 7, 9, 3]\nlist3 = [True, False, False]"], ["Python Lists: A list with strings, integers and boolean values", "list1 = [\"abc\", 34, True, 40, \"male\"]"], ["Python Lists: What is the data type of a list", "mylist = [\"apple\", \"banana\", \"cherry\"]\nprint(type(mylist))"], ["Python Lists: Using the list() constructor to make a List", "thislist = list((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thislist)"], ["Python Lists: Create a List", "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist)"], ["Python Lists: Lists allow duplicate values", "thislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\nprint(thislist)"], ["Python Lists: Print the number of items in the list", "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(len(thislist))"], ["Python Lists: String, int and boolean data types", "list1 = [\"apple\", \"banana\", \"cherry\"]\nlist2 = [1, 5, 7, 9, 3]\nlist3 = [True, False, False]"], ["Python Lists: A list with strings, integers and boolean values", "list1 = [\"abc\", 34, True, 40, \"male\"]"], ["Python Lists: What is the data type of a list", "mylist = [\"apple\", \"banana\", \"cherry\"]\nprint(type(mylist))"], ["Python Lists: Using the list() constructor to make a List", "thislist = list((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thislist)"], ["Python - Access List Items: Print the second item of the list", "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist[1])"], ["Python - Access List Items: Print the last item of the list", "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist[-1])"], ["Python - Access List Items: Return the third, fourth, and fifth item", "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \n  \"kiwi\", \"melon\", \"mango\"]\nprint(thislist[2:5])"], ["Python - Access List Items: This example returns the items from the beginning to, but NOT including, \"kiwi\"", "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \n  \"kiwi\", \"melon\", \"mango\"]\nprint(thislist[:4])"], ["Python - Access List Items: This example returns the items from \"cherry\" to the end", "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \n  \"kiwi\", \"melon\", \"mango\"]\nprint(thislist[2:])"], ["Python - Access List Items: This example returns the items from \"orange\" (-4) to, but NOT including \n\"mango\" (-1)", "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \n  \"kiwi\", \"melon\", \"mango\"]\nprint(thislist[-4:-1])"], ["Python - Access List Items: Check if \"apple\" is present in the list", "thislist = [\"apple\", \"banana\", \"cherry\"]\n  if \"apple\" in thislist:\u00a0 print(\"Yes, 'apple' is in the fruits list\")"], ["Python - Change List Items: Change the second item", "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist[1] = \"blackcurrant\"\nprint(thislist)"], ["Python - Change List Items: Change the values \"banana\" and \"cherry\" with the values \"blackcurrant\" and \"watermelon\"", "thislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"mango\"]\nthislist[1:3] = [\"blackcurrant\", \"watermelon\"]\nprint(thislist)"], ["Python - Change List Items: Change the second value by replacing it with two new \nvalues", "thislist = [\"apple\", \"banana\", \"cherry\"]thislist[1:2] = [\"blackcurrant\", \n  \"watermelon\"]print(thislist)"], ["Python - Change List Items: Change the second and third value by replacing it with one  \nvalue", "thislist = [\"apple\", \"banana\", \"cherry\"]thislist[1:3] = [\"watermelon\"]print(thislist)"], ["Python - Change List Items: Insert \"watermelon\" as the third item", "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.insert(2, \"watermelon\")\nprint(thislist)"], ["Python - Add List Items: Using the append() method to append an item", "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.append(\"orange\")\nprint(thislist)"], ["Python - Add List Items: Insert an item as the second position", "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.insert(1, \"orange\")\nprint(thislist)"], ["Python - Add List Items: Add the elements of tropical to thislist", "thislist = [\"apple\", \"banana\", \"cherry\"]\ntropical = [\"mango\", \"pineapple\", \"papaya\"]\nthislist.extend(tropical)\nprint(thislist)"], ["Python - Add List Items: Add elements of a tuple to a list", "thislist = [\"apple\", \"banana\", \"cherry\"]\n  thistuple = (\"kiwi\", \"orange\")\nthislist.extend(thistuple)\nprint(thislist)"], ["Python - Remove List Items: Remove \"banana\"", "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.remove(\"banana\")\nprint(thislist)"], ["Python - Remove List Items: Remove the second item", "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.pop(1)\nprint(thislist)"], ["Python - Remove List Items: Remove the last item", "thislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.pop()\nprint(thislist)"], ["Python - Remove List Items: Remove the first item", "thislist = [\"apple\", \"banana\", \"cherry\"]\n  del\nthislist[0]print(thislist)"], ["Python - Remove List Items: Delete the entire list", "thislist = [\"apple\", \"banana\", \"cherry\"]\n  del\nthislist"], ["Python - Remove List Items: Clear the list content", "thislist = [\"apple\", \"banana\", \"cherry\"]\n  thislist.clear()print(thislist)"], ["Python - Loop Lists: Print all items in the list, one by one", "thislist = [\"apple\", \"banana\", \"cherry\"]\n  for x in thislist:\u00a0 print(x)"], ["Python - Loop Lists: Print all items by referring to their index number", "thislist = [\"apple\", \"banana\", \"cherry\"]for i \n  in range(len(thislist)):\n\u00a0\nprint(thislist[i])"], ["Python - Loop Lists: Print all items, using a while loop to go \n  through all the index number", "thislist = [\"apple\", \"banana\", \"cherry\"]i = 0\n  while i < len(thislist):\n\u00a0\nprint(thislist[i])\u00a0 i = i + 1"], ["Python - Loop Lists: A short hand for loop that will print all items in a list", "thislist = [\"apple\", \"banana\", \"cherry\"][print(x) for x in thislist]"], ["Python - List Comprehension: Example", "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]newlist = []\nfor x in fruits:\u00a0 if \"a\" in x:\u00a0\u00a0\u00a0 \n  newlist.append(x)print(newlist)"], ["Python - List Comprehension: Example", "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]newlist = [x \n  for x in fruits if \"a\" in x]print(newlist)"], ["Python - List Comprehension: Only accept items that are not \"apple\"", "newlist = [x for x in fruits if x != \"apple\"]"], ["Python - List Comprehension: With no if statement", "newlist = [x for x in fruits]"], ["Python - List Comprehension: You can use the range() function to create an iterable", "newlist = [x for x in range(10)]"], ["Python - List Comprehension: Accept only numbers lower than 5", "newlist = [x for x in range(10) if x < 5]"], ["Python - List Comprehension: Set the values in the new list to upper case", "newlist = [x.upper() \n  for x in fruits]"], ["Python - List Comprehension: Set all values in the new list to 'hello'", "newlist = ['hello' for x in fruits]"], ["Python - List Comprehension: Return \"orange\" instead of \"banana\"", "newlist = [x if x != \"banana\" else \"orange\" \n  for x in fruits]"], ["Python - Sort Lists: Sort the list alphabetically", "thislist = [\"orange\", \"mango\", \"kiwi\", \n  \"pineapple\", \"banana\"]thislist.sort()\nprint(thislist)"], ["Python - Sort Lists: Sort the list numerically", "thislist = [100, 50, 65, 82, 23]thislist.sort()\nprint(thislist)"], ["Python - Sort Lists: Sort the list descending", "thislist = [\"orange\", \"mango\", \"kiwi\", \n  \"pineapple\", \"banana\"]thislist.sort(reverse = True)\nprint(thislist)"], ["Python - Sort Lists: Sort the list descending", "thislist = [100, 50, 65, 82, 23]thislist.sort(reverse = True)\nprint(thislist)"], ["Python - Sort Lists: Sort the list based on how close the number is to 50", "def myfunc(n):\u00a0 return abs(n - 50)thislist = [100, 50, 65, 82, 23]thislist.sort(key = \n  myfunc)print(thislist)"], ["Python - Sort Lists: Case sensitive sorting can give an unexpected result", "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]thislist.sort()print(thislist)"], ["Python - Sort Lists: Perform a case-insensitive sort of the list", "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]thislist.sort(key \n  = str.lower)print(thislist)"], ["Python - Sort Lists: Reverse the order of the list items", "thislist = [\"banana\", \"Orange\", \"Kiwi\", \"cherry\"]thislist.reverse()print(thislist)"], ["Python - Copy Lists: Make a copy of a list with the copy() method", "thislist = [\"apple\", \"banana\", \"cherry\"]mylist \n  = thislist.copy()\n  print(mylist)"], ["Python - Copy Lists: Make a copy of a list with the list() method", "thislist = [\"apple\", \"banana\", \"cherry\"]mylist \n  = list(thislist)\n  print(mylist)"], ["Python - Join Lists: Join two list", "list1 = [\"a\", \"b\", \"c\"]list2 = [1, 2, 3]list3 = list1 + list2\n  print(list3)"], ["Python - Join Lists: Append list2 into list1", "list1 = [\"a\", \"b\" , \"c\"]list2 = [1, 2, 3]\nfor x in list2:\u00a0 list1.append(x)print(list1)"], ["Python - Join Lists: Use the extend() method to add list2 at the end of list1", "list1 = [\"a\", \"b\" , \"c\"]list2 = [1, 2, 3]list1.extend(list2)\n  print(list1)"], ["Python Tuples: Create a Tuple", "thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple)"], ["Python Tuples: Tuples allow duplicate values", "thistuple = (\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\")\nprint(thistuple)"], ["Python Tuples: Print the number of items in the tuple", "thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(len(thistuple))"], ["Python Tuples: One item tuple, remember the comma", "thistuple = (\"apple\",)\n  print(type(thistuple))#NOT a tuplethistuple = (\"apple\")\n  print(type(thistuple))"], ["Python Tuples: String, int and boolean data types", "tuple1 = (\"apple\", \"banana\", \"cherry\")\ntuple2 = (1, 5, 7, 9, 3)\ntuple3 = (True, False, False)"], ["Python Tuples: A tuple with strings, integers and boolean values", "tuple1 = (\"abc\", 34, True, 40, \"male\")"], ["Python Tuples: What is the data type of a tuple", "mytuple = (\"apple\", \"banana\", \"cherry\")\nprint(type(mytuple))"], ["Python Tuples: Using the tuple() method to make a tuple", "thistuple = tuple((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thistuple)"], ["Python Tuples: Create a Tuple", "thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple)"], ["Python Tuples: Tuples allow duplicate values", "thistuple = (\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\")\nprint(thistuple)"], ["Python Tuples: Print the number of items in the tuple", "thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(len(thistuple))"], ["Python Tuples: One item tuple, remember the comma", "thistuple = (\"apple\",)\n  print(type(thistuple))#NOT a tuplethistuple = (\"apple\")\n  print(type(thistuple))"], ["Python Tuples: String, int and boolean data types", "tuple1 = (\"apple\", \"banana\", \"cherry\")\ntuple2 = (1, 5, 7, 9, 3)\ntuple3 = (True, False, False)"], ["Python Tuples: A tuple with strings, integers and boolean values", "tuple1 = (\"abc\", 34, True, 40, \"male\")"], ["Python Tuples: What is the data type of a tuple", "mytuple = (\"apple\", \"banana\", \"cherry\")\nprint(type(mytuple))"], ["Python Tuples: Using the tuple() method to make a tuple", "thistuple = tuple((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thistuple)"], ["Python - Access Tuple Items: Print the second item in the tuple", "thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple[1])"], ["Python - Access Tuple Items: Print the last item of the tuple", "thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple[-1])"], ["Python - Access Tuple Items: Return the third, fourth, and fifth item", "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\nprint(thistuple[2:5])"], ["Python - Access Tuple Items: This example returns the items from the beginning to, but NOT included, \"kiwi\"", "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\nprint(thistuple[:4])"], ["Python - Access Tuple Items: This example returns the items from \"cherry\" and to the end", "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\nprint(thistuple[2:])"], ["Python - Access Tuple Items: This example returns the items from index -4 (included) to index -1 (excluded", "thistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\nprint(thistuple[-4:-1])"], ["Python - Access Tuple Items: Check if \"apple\" is present in the tuple", "thistuple = (\"apple\", \"banana\", \"cherry\")\n  if \"apple\" in thistuple:\u00a0 print(\"Yes, 'apple' is in the fruits \n  tuple\")"], ["Python - Update Tuples: Convert the tuple into a list to be able to change it", "x = (\"apple\", \"banana\", \"cherry\")y = list(x)y[1] = \"kiwi\"x = \n  tuple(y)print(x)"], ["Python - Update Tuples: Convert the tuple into a list, add \"orange\", and convert it back into a tuple", "thistuple = (\"apple\", \"banana\", \"cherry\")y = list(thistuple)y.append(\"orange\")\n  thistuple = \n  tuple(y)"], ["Python - Update Tuples: Create a new tuple with the value \"orange\", and add that tuple", "thistuple = (\"apple\", \"banana\", \"cherry\")y = (\"orange\",)thistuple += y\nprint(thistuple)"], ["Python - Update Tuples: Convert the tuple into a list, remove \"apple\", and convert it back into a tuple", "thistuple = (\"apple\", \"banana\", \"cherry\")y = list(thistuple)y.remove(\"apple\")\n  thistuple = \n  tuple(y)"], ["Python - Update Tuples: The del keyword can delete the tuple \ncompletely", "thistuple = (\"apple\", \"banana\", \"cherry\")\n  del\nthistupleprint(thistuple)\n  #this will raise an error because the tuple no longer exists"], ["Python - Unpack Tuples: Packing a tuple", "fruits = (\"apple\", \"banana\", \"cherry\")"], ["Python - Unpack Tuples: Unpacking a tuple", "fruits = (\"apple\", \"banana\", \"cherry\")\n\n(green, yellow, red) = fruits\n\nprint(green)\nprint(yellow)\nprint(red)"], ["Python - Unpack Tuples: Assign the rest of the values as a list called \"red\"", "fruits = (\"apple\", \"banana\", \"cherry\", \"strawberry\", \"raspberry\")\n\n(green, yellow, *red) = fruits\n\nprint(green)\nprint(yellow)\nprint(red)"], ["Python - Unpack Tuples: Add a list of values the \"tropic\" variable", "fruits = (\"apple\", \"mango\", \"papaya\", \"pineapple\", \"cherry\")\n\n(green, *tropic, red) = fruits\n\nprint(green)\nprint(tropic)\nprint(red)"], ["Python - Loop Tuples: Iterate through the items and print the values", "thistuple = (\"apple\", \"banana\", \"cherry\")\n  for x in thistuple:\u00a0 print(x)"], ["Python - Loop Tuples: Print all items by referring to their index number", "thistuple = (\"apple\", \"banana\", \"cherry\")\nfor i in range(len(thistuple)):\n\u00a0 print(thistuple[i])"], ["Python - Loop Tuples: Print all items, using a while loop to go through all the index numbers", "thistuple = (\"apple\", \"banana\", \"cherry\")\ni = 0\nwhile i < len(thistuple):\n\u00a0 print(thistuple[i])\n\u00a0 i = i + 1"], ["Python - Join Tuples: Join two tuples", "tuple1 = (\"a\", \"b\" , \"c\")tuple2 = (1, 2, 3)\n  tuple3 = tuple1 + tuple2\n  print(tuple3)"], ["Python - Join Tuples: Multiply the fruits tuple by 2", "fruits = (\"apple\", \"banana\", \"cherry\")mytuple = fruits * 2\n  print(mytuple)"], ["Python Sets: Create a Set", "thisset = {\"apple\", \"banana\", \"cherry\"}print(thisset)"], ["Python Sets: Duplicate values will be ignored", "thisset = {\"apple\", \"banana\", \"cherry\", \"apple\"}\n  print(thisset)"], ["Python Sets: True\n  and 1 is considered the same value", "thisset = {\"apple\", \"banana\", \"cherry\", True, 1, 2}\n  print(thisset)"], ["Python Sets: Get the number of items in a set", "thisset = {\"apple\", \"banana\", \"cherry\"}\n  print(len(thisset))"], ["Python Sets: String, int and boolean data types", "set1 = {\"apple\", \"banana\", \"cherry\"}\n  set2 = {1, 5, 7, 9, 3}\n  set3 = {True, False, False}"], ["Python Sets: A set with strings, integers and boolean values", "set1 = {\"abc\", 34, True, 40, \"male\"}"], ["Python Sets: What is the data type of a set", "myset = {\"apple\", \"banana\", \"cherry\"}\nprint(type(myset))"], ["Python Sets: Using the set() constructor to make a set", "thisset = set((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thisset)"], ["Python Sets: Create a Set", "thisset = {\"apple\", \"banana\", \"cherry\"}print(thisset)"], ["Python Sets: Duplicate values will be ignored", "thisset = {\"apple\", \"banana\", \"cherry\", \"apple\"}\n  print(thisset)"], ["Python Sets: True\n  and 1 is considered the same value", "thisset = {\"apple\", \"banana\", \"cherry\", True, 1, 2}\n  print(thisset)"], ["Python Sets: Get the number of items in a set", "thisset = {\"apple\", \"banana\", \"cherry\"}\n  print(len(thisset))"], ["Python Sets: String, int and boolean data types", "set1 = {\"apple\", \"banana\", \"cherry\"}\n  set2 = {1, 5, 7, 9, 3}\n  set3 = {True, False, False}"], ["Python Sets: A set with strings, integers and boolean values", "set1 = {\"abc\", 34, True, 40, \"male\"}"], ["Python Sets: What is the data type of a set", "myset = {\"apple\", \"banana\", \"cherry\"}\nprint(type(myset))"], ["Python Sets: Using the set() constructor to make a set", "thisset = set((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thisset)"], ["Python - Access Set Items: Loop through the set, and print the values", "thisset = {\"apple\", \"banana\", \"cherry\"}for x in thisset:\u00a0 print(x)"], ["Python - Access Set Items: Check if \"banana\" is present in the set", "thisset = {\"apple\", \"banana\", \"cherry\"}print(\"banana\" \n  in thisset)"], ["Python - Add Set Items: Add an item to a set, using the add() \nmethod", "thisset = {\"apple\", \"banana\", \"cherry\"}\n  thisset.add(\"orange\")print(thisset)"], ["Python - Add Set Items: Add elements from tropical into \nthisset", "thisset = {\"apple\", \"banana\", \"cherry\"}tropical = {\"pineapple\", \"mango\", \"papaya\"}\n  thisset.update(tropical)\nprint(thisset)"], ["Python - Add Set Items: Add elements of a list to at set", "thisset = {\"apple\", \"banana\", \"cherry\"}\n  mylist = [\"kiwi\", \"orange\"]\n  thisset.update(mylist)\nprint(thisset)"], ["Python - Remove Set Items: Remove \"banana\" by using the remove() \nmethod", "thisset = {\"apple\", \"banana\", \"cherry\"}\n  thisset.remove(\"banana\")\n  print(thisset)"], ["Python - Remove Set Items: Remove \"banana\" by using the discard() \nmethod", "thisset = {\"apple\", \"banana\", \"cherry\"}\n  thisset.discard(\"banana\")\n  print(thisset)"], ["Python - Remove Set Items: Remove a random item by using the pop() \nmethod", "thisset = {\"apple\", \"banana\", \"cherry\"}\n  x =\n  thisset.pop()print(x)\n  print(thisset)"], ["Python - Remove Set Items: The clear() \nmethod empties the set", "thisset = {\"apple\", \"banana\", \"cherry\"}\n  thisset.clear()\n  print(thisset)"], ["Python - Remove Set Items: The del keyword will delete the set \ncompletely", "thisset = {\"apple\", \"banana\", \"cherry\"}\n  del\n  thisset\n  print(thisset)"], ["Python - Loop Sets: Loop through the set, and print the values", "thisset = {\"apple\", \"banana\", \"cherry\"}for x in thisset:\u00a0 print(x)"], ["Python - Join Sets: The union() method returns a new set with all items from both sets", "set1 = {\"a\", \"b\" , \"c\"}set2 = {1, 2, 3}\n  set3 = set1.union(set2)print(set3)"], ["Python - Join Sets: The update() method inserts the items in set2 into set1", "set1 = {\"a\", \"b\" , \"c\"}set2 = {1, 2, 3}\n  set1.update(set2)print(set1)"], ["Python - Join Sets: Keep the items that exist in both set x, and set y", "x = {\"apple\", \"banana\", \"cherry\"}y = {\"google\", \"microsoft\", \"apple\"}\nx.intersection_update(y)print(x)"], ["Python - Join Sets: Return a set that contains the items that exist in both set x, and set y", "x = {\"apple\", \"banana\", \"cherry\"}y = {\"google\", \"microsoft\", \"apple\"}\nz = x.intersection(y)print(z)"], ["Python - Join Sets: Keep the items that are not present in both sets", "x = {\"apple\", \"banana\", \"cherry\"}y = {\"google\", \"microsoft\", \"apple\"}\nx.symmetric_difference_update(y)print(x)"], ["Python - Join Sets: Return a set that contains all items from both sets, except items that are \npresent in both", "x = {\"apple\", \"banana\", \"cherry\"}y = {\"google\", \"microsoft\", \"apple\"}\nz = x.symmetric_difference(y)print(z)"], ["Python - Join Sets: True\n  and 1 is considered the same value", "x = {\"apple\", \"banana\", \"cherry\", True}y = {\"google\", \n  1, \"apple\", 2}\nz = x.symmetric_difference(y)"], ["Python Dictionaries: Create and print a dictionary", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}\nprint(thisdict)"], ["Python Dictionaries: Print the \"brand\" value of the dictionary", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}\nprint(thisdict[\"brand\"])"], ["Python Dictionaries: Duplicate values will overwrite existing values", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964,\u00a0 \"year\": 2020\n}\nprint(thisdict)"], ["Python Dictionaries: Print the number of items in the dictionary", "print(len(thisdict))"], ["Python Dictionaries: String, int, boolean, and list data types", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"electric\": False,\n\u00a0\u00a0\"year\": 1964,\u00a0 \"colors\": [\"red\", \"white\", \"blue\"]\n}"], ["Python Dictionaries: Print the data type of a dictionary", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}\nprint(type(thisdict))"], ["Python Dictionaries: Using the dict() method to make a dictionary", "thisdict = \n  dict(name = \"John\", age = 36, country = \"Norway\")\nprint(thisdict)"], ["Python Dictionaries: Create and print a dictionary", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}\nprint(thisdict)"], ["Python Dictionaries: Print the \"brand\" value of the dictionary", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}\nprint(thisdict[\"brand\"])"], ["Python Dictionaries: Duplicate values will overwrite existing values", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964,\u00a0 \"year\": 2020\n}\nprint(thisdict)"], ["Python Dictionaries: Print the number of items in the dictionary", "print(len(thisdict))"], ["Python Dictionaries: String, int, boolean, and list data types", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"electric\": False,\n\u00a0\u00a0\"year\": 1964,\u00a0 \"colors\": [\"red\", \"white\", \"blue\"]\n}"], ["Python Dictionaries: Print the data type of a dictionary", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}\nprint(type(thisdict))"], ["Python Dictionaries: Using the dict() method to make a dictionary", "thisdict = \n  dict(name = \"John\", age = 36, country = \"Norway\")\nprint(thisdict)"], ["Python - Access Dictionary Items: Get the value of the \"model\" key", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}x = thisdict[\"model\"]"], ["Python - Access Dictionary Items: Get the value of the \"model\" key", "x = thisdict.get(\"model\")"], ["Python - Access Dictionary Items: Get a list of the keys", "x = thisdict.keys()"], ["Python - Access Dictionary Items: Add a new item to the original dictionary, and see that the keys list gets \nupdated as well", "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}\nx = car.keys()print(x) #before the changecar[\"color\"] = \n  \"white\"print(x) #after the change"], ["Python - Access Dictionary Items: Get a list of the values", "x = thisdict.values()"], ["Python - Access Dictionary Items: Make a change in the original dictionary, and see that the values list gets \nupdated as well", "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}\nx = car.values()print(x) #before the changecar[\"year\"] \n  = 2020print(x) #after the change"], ["Python - Access Dictionary Items: Add a new item to the original dictionary, and see that the values list gets \nupdated as well", "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}\nx = car.values()print(x) #before the changecar[\"color\"] \n  = \"red\"print(x) #after the change"], ["Python - Access Dictionary Items: Get a list of the key:value pair", "x = thisdict.items()"], ["Python - Access Dictionary Items: Make a change in the original dictionary, and see that the items list gets \nupdated as well", "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}\nx = car.items()print(x) #before the changecar[\"year\"] \n  = 2020print(x) #after the change"], ["Python - Access Dictionary Items: Add a new item to the original dictionary, and see that the items list gets \nupdated as well", "car = {\"brand\": \"Ford\",\"model\": \"Mustang\",\"year\": 1964}\nx = car.items()print(x) #before the changecar[\"color\"] \n  = \"red\"print(x) #after the change"], ["Python - Access Dictionary Items: Check if \"model\" is present in the dictionary", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}\n  if \"model\" in thisdict:\u00a0 print(\"Yes, 'model' is \n  one of the keys in the thisdict dictionary\")"], ["Python - Change Dictionary Items: Change the \"year\" to 2018", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}thisdict[\"year\"] = 2018"], ["Python - Change Dictionary Items: Update the \"year\" of the car by using the update() \nmethod", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}thisdict.update({\"year\": 2020})"], ["Python - Add Dictionary Items: Example", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}thisdict[\"color\"] = \"red\"print(thisdict)"], ["Python - Add Dictionary Items: Add a color item to the dictionary by using the update() \nmethod", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}thisdict.update({\"color\": \n  \"red\"})"], ["Python - Remove Dictionary Items: The pop() method removes the item with the specified key name", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}thisdict.pop(\"model\")\n  print(thisdict)"], ["Python - Remove Dictionary Items: The popitem() method removes the last \n  inserted item (in versions before 3.7, a random item is removed instead)", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}thisdict.popitem()\n  print(thisdict)"], ["Python - Remove Dictionary Items: The del keyword removes the item with the specified \n  key name", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}del thisdict[\"model\"]print(thisdict)"], ["Python - Remove Dictionary Items: The clear() method empties the \n  dictionary", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}thisdict.clear()print(thisdict)"], ["Python - Loop Dictionaries: Print all key names in the dictionary, one by one", "for x in thisdict:\u00a0 print(x)"], ["Python - Loop Dictionaries: Print all values in the dictionary, one by one", "for x in thisdict:\u00a0 print(thisdict[x])"], ["Python - Loop Dictionaries: You can also use the values() method to \nreturn values of a dictionary", "for x in thisdict.values():\u00a0 print(x)"], ["Python - Loop Dictionaries: You can use the keys() method to \nreturn the keys of a dictionary", "for x in thisdict.keys():\u00a0 print(x)"], ["Python - Loop Dictionaries: Loop through both keys and values, by using the\nitems() method", "for x, y in thisdict.items():\u00a0 print(x, y)"], ["Python - Copy Dictionaries: Make a copy of a dictionary with the copy() method", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}mydict \n  = thisdict.copy()\n  print(mydict)"], ["Python - Copy Dictionaries: Make a copy of a dictionary with the dict() \nfunction", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}mydict \n  = dict(thisdict)\n  print(mydict)"], ["Python - Nested Dictionaries: Create a dictionary that contain three dictionaries", "myfamily = {\u00a0 \"child1\" : {\u00a0\u00a0\u00a0 \"name\" : \"Emil\",\n  \u00a0\u00a0\u00a0 \"year\" : 2004\u00a0 },\u00a0 \"child2\" : {\u00a0\u00a0\u00a0 \n  \"name\" : \"Tobias\",\u00a0\u00a0\u00a0 \"year\" : 2007\u00a0 },\u00a0 \n  \"child3\" : {\u00a0\u00a0\u00a0 \"name\" : \"Linus\",\n  \u00a0\u00a0\u00a0 \"year\" : 2011\u00a0 }}"], ["Python - Nested Dictionaries: Create three dictionaries, then create one dictionary that will contain the \nother three dictionaries", "child1 = {\u00a0 \"name\" : \"Emil\",\u00a0 \"year\" : 2004}child2 = {\u00a0 \n  \"name\" : \"Tobias\",\u00a0 \"year\" : 2007}child3 = {\u00a0 \"name\" : \"Linus\",\u00a0 \n  \"year\" : 2011}myfamily = {\u00a0 \"child1\" : child1,\u00a0 \n  \"child2\" : child2,\u00a0 \"child3\" : child3}"], ["Python - Nested Dictionaries: Print the name of child 2", "print(myfamily[\"child2\"][\"name\"])"], ["Python If ... Else: If statement", "a = 33\nb = 200\nif b > a:\u00a0 print(\"b is greater than a\")"], ["Python If ... Else: Example", "a = 33\nb = 33\nif b > a:\n\t\u00a0\n\tprint(\"b is greater than a\")\nelif a == b:\n\t\u00a0\n\tprint(\"a and b are equal\")"], ["Python If ... Else: Example", "a = 200\nb = 33\nif b > a:\n\t\u00a0\n\tprint(\"b is greater than a\")\nelif a == b:\n\t\u00a0\n\tprint(\"a and b are equal\")\n  else:\n\t\u00a0\n\tprint(\"a is greater than b\")"], ["Python If ... Else: Example", "a = 200\nb = 33\nif b > a:\n\t\u00a0\n\tprint(\"b is greater than a\")\n  else:\n\t\u00a0\n\tprint(\"b is not greater than a\")"], ["Python If ... Else: One line if statement", "if a > b: print(\"a is greater than b\")"], ["Python If ... Else: One line if else statement", "a = 2b = 330print(\"A\") if a > b else print(\"B\")"], ["Python If ... Else: One line if else statement, with 3 conditions", "a = 330b = 330print(\"A\") if a > b else print(\"=\") if a == b else print(\"B\")"], ["Python If ... Else: Test if a is greater than\n  b, AND if c \n  is greater than a", "a = 200b = 33c = 500if a > b and c > a:\n\t\u00a0\n\tprint(\"Both conditions are True\")"], ["Python If ... Else: Test if a is greater than\n  b, OR if a \n  is greater than c", "a = 200b = 33c = 500if a > b or a > c:\n\t\u00a0\n\tprint(\"At least one of the conditions is True\")"], ["Python If ... Else: Test if a is NOT greater than\n  b", "a = 33b = 200if not a > b:\n\t\u00a0\n\tprint(\"a is NOT greater than b\")"], ["Python If ... Else: Example", "x = 41if x > 10:\n\t\u00a0\n\tprint(\"Above ten,\")\u00a0 if x > 20:\u00a0\u00a0\u00a0 print(\"and \n  also above 20!\")\u00a0 else:\u00a0\u00a0\u00a0 print(\"but not \n  above 20.\")"], ["Python If ... Else: Example", "a = 33b = 200if b > a:\u00a0 pass"], ["Python While Loops: Print i as long as i is less than 6", "i = 1\nwhile i < 6:\n\u00a0\u00a0print(i)\n\u00a0\u00a0i += 1"], ["Python While Loops: Exit the loop when i is 3", "i = 1\nwhile i < 6:\n\u00a0\u00a0print(i)\n  \u00a0 if i == 3:\u00a0\u00a0\u00a0 break\u00a0\u00a0i += 1"], ["Python While Loops: Continue to the next iteration if i is 3", "i = 0\nwhile i < 6:\n  \u00a0\u00a0i += 1\n\u00a0 if i == 3:\u00a0\u00a0\u00a0 continue\u00a0\u00a0print(i)"], ["Python While Loops: Print a message once the condition is false", "i = 1\nwhile i < 6:\n\u00a0\u00a0print(i)\n\u00a0\u00a0i += 1else:\u00a0 print(\"i is no longer less than 6\")"], ["Python For Loops: Print each fruit in a fruit list", "fruits = [\"apple\", \"banana\", \"cherry\"]for \n  x in fruits:\n\t\u00a0\n\tprint(x)"], ["Python For Loops: Loop through the letters in the word \"banana\"", "for x in \"banana\":\u00a0 print(x)"], ["Python For Loops: Exit the loop when x is \"banana\"", "fruits = [\"apple\", \"banana\", \"cherry\"]for x in fruits:\u00a0 print(x)\n  \u00a0 if x == \n  \"banana\":\u00a0\u00a0\u00a0 break"], ["Python For Loops: Exit the loop when x is \"banana\", \nbut this time the break comes before the print", "fruits = [\"apple\", \"banana\", \"cherry\"]for x in fruits:\u00a0 if x == \n  \"banana\":\u00a0\u00a0\u00a0 break\u00a0 print(x)"], ["Python For Loops: Do not print banana", "fruits = [\"apple\", \"banana\", \"cherry\"]for x in fruits:\u00a0 if x == \n  \"banana\":\u00a0\u00a0\u00a0 continue\u00a0 print(x)"], ["Python For Loops: Using the range() function", "for x in range(6):\n\t\u00a0\n\tprint(x)"], ["Python For Loops: Using the start parameter", "for x in range(2, 6):\n\t\u00a0\n\tprint(x)"], ["Python For Loops: Increment the sequence with 3 (default is 1)", "for x in range(2, 30, 3):\n\t\u00a0\n\tprint(x)"], ["Python For Loops: Print all numbers from 0 to 5, and print a message when the loop has ended", "for x in range(6):\u00a0\n\tprint(x)else:\u00a0\n\tprint(\"Finally finished!\")"], ["Python For Loops: Break the loop when x is 3, and see what happens with the \nelse block", "for x in range(6):\u00a0 if x == 3: break\u00a0\n\tprint(x)else:\u00a0\n\tprint(\"Finally finished!\")"], ["Python For Loops: Print each adjective for every fruit", "adj = [\"red\", \"big\", \"tasty\"]fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in adj:\u00a0 for y in fruits:\u00a0\u00a0\u00a0 print(x, y)"], ["Python For Loops: Example", "for x in [0, 1, 2]:\u00a0 pass"], ["Python Functions: Example", "def my_function():\u00a0 print(\"Hello from a function\")"], ["Python Functions: Example", "def my_function():\u00a0 print(\"Hello from a function\")\nmy_function()"], ["Python Functions: Example", "def my_function(fname):\u00a0 print(fname + \" Refsnes\")\n  my_function(\"Emil\")my_function(\"Tobias\")my_function(\"Linus\")"], ["Python Functions: This function expects 2 arguments, and gets 2 arguments", "def my_function(fname, lname):\u00a0 print(fname + \" \" + lname)\n  my_function(\"Emil\", \"Refsnes\")"], ["Python Functions: If the number of arguments is unknown, add a * before the parameter name", "def my_function(*kids):\u00a0 print(\"The youngest child \n  is \" + kids[2])\n  my_function(\"Emil\", \"Tobias\", \"Linus\")"], ["Python Functions: Example", "def my_function(child3, child2, child1):\u00a0 print(\"The youngest child \n  is \" + child3)\n  my_function(child1 = \"Emil\", child2 = \"Tobias\", child3 = \"Linus\")"], ["Python Functions: If the number of keyword arguments is unknown, add a double\n  ** before the parameter name", "def my_function(**kid):\u00a0 print(\"His last name is \" + kid[\"lname\"])\nmy_function(fname = \"Tobias\", lname = \"Refsnes\")"], ["Python Functions: Example", "def my_function(country = \"Norway\"):\u00a0 print(\"I am from \" + \n  country)\n  my_function(\"Sweden\")my_function(\"India\")my_function()my_function(\"Brazil\")"], ["Python Functions: Example", "def my_function(food):\u00a0 for x in food:\u00a0\u00a0\u00a0 \n  print(x)fruits = [\"apple\", \"banana\", \"cherry\"]\n  my_function(fruits)"], ["Python Functions: Example", "def my_function(x):\u00a0 return 5 * xprint(my_function(3))print(my_function(5))\n  print(my_function(9))"], ["Python Functions: Example", "def myfunction():\u00a0 pass"], ["Python Lambda: Add 10 to argument a, and \n  return the result", "x = lambda a : a + 10print(x(5))"], ["Python Lambda: Multiply argument a with argument \n  b and return the \n  result", "x = lambda a, b : a * bprint(x(5, 6))"], ["Python Lambda: Summarize argument a, \n  b, and c and \n  return the \n  result", "x = lambda a, b, c : a + b + cprint(x(5, 6, \n  2))"], ["Python Lambda: Example", "def myfunc(n):\n\u00a0\u00a0return lambda a : a * n"], ["Python Lambda: Example", "def myfunc(n):\n\u00a0\u00a0return lambda a : a * n\n\n  mydoubler = myfunc(2)\nprint(mydoubler(11))"], ["Python Lambda: Example", "def myfunc(n):\n\u00a0\u00a0return lambda a : a * n\n\n  mytripler = myfunc(3)\nprint(mytripler(11))"], ["Python Lambda: Example", "def myfunc(n):\n\u00a0\u00a0return lambda a : a * n\n\n  mydoubler = myfunc(2)mytripler = myfunc(3)\nprint(mydoubler(11))\nprint(mytripler(11))"], ["Python Arrays: Create an array containing car names", "cars = [\"Ford\", \"Volvo\", \"BMW\"]"], ["Python Arrays: Get the value of the first array item", "x = cars[0]"], ["Python Arrays: Modify the value of the first array item", "cars[0] = \"Toyota\""], ["Python Arrays: Return the number of elements in the cars \narray", "x = len(cars)"], ["Python Arrays: Print each item in the cars array", "for x in cars:\u00a0 print(x)"], ["Python Arrays: Add one more element to the cars array", "cars.append(\"Honda\")"], ["Python Arrays: Delete the second element of the cars array", "cars.pop(1)"], ["Python Arrays: Delete the element that has the value \"Volvo\"", "cars.remove(\"Volvo\")"], ["Python Classes and Objects: Create a class named MyClass, with a property named x", "class MyClass:\u00a0 x = 5"], ["Python Classes and Objects: Create an object named p1, and print the value of x", "p1 = MyClass()print(p1.x)"], ["Python Classes and Objects: Create a class named Person, use the __init__() function to assign values \nfor name and age", "class Person:\u00a0 def __init__(self, name, age):\u00a0\u00a0\u00a0 \n  self.name = name\u00a0\u00a0\u00a0 self.age = agep1 = Person(\"John\", \n  36)\nprint(p1.name)print(p1.age)"], ["Python Classes and Objects: The string representation of an object WITHOUT the __str__() function", "class Person:\u00a0 def __init__(self, name, age):\u00a0\u00a0\u00a0 \n  self.name = name\u00a0\u00a0\u00a0 self.age = agep1 = Person(\"John\", \n  36)\nprint(p1)"], ["Python Classes and Objects: The string representation of an object WITH the __str__() function", "class Person:\u00a0 def __init__(self, name, age):\u00a0\u00a0\u00a0 \n  self.name = name\u00a0\u00a0\u00a0 self.age = age\u00a0\n  def __str__(self):\u00a0\u00a0\u00a0 return f\"{self.name}({self.age})\"\np1 = Person(\"John\", \n  36)\nprint(p1)"], ["Python Classes and Objects: Insert a function that prints a greeting, and execute it on the p1 object", "class Person:\u00a0 def __init__(self, name, age):\u00a0\u00a0\u00a0 \n  self.name = name\u00a0\u00a0\u00a0 self.age = age\u00a0 def myfunc(self):\u00a0\u00a0\u00a0 \n  print(\"Hello my name is \" + self.name)p1 = Person(\"John\", \n  36)p1.myfunc()"], ["Python Classes and Objects: Use the words mysillyobject and abc instead of self", "class Person:\u00a0 def __init__(mysillyobject, name, age):\u00a0\u00a0\u00a0 \n  mysillyobject.name = name\u00a0\u00a0\u00a0 mysillyobject.age = age\u00a0 def myfunc(abc):\u00a0\u00a0\u00a0 \n  print(\"Hello my name is \" + abc.name)p1 = Person(\"John\", \n  36)p1.myfunc()"], ["Python Classes and Objects: Set the age of p1 to 40", "p1.age = 40"], ["Python Classes and Objects: Delete the age property from the p1 object", "del p1.age"], ["Python Classes and Objects: Delete the p1 object", "del p1"], ["Python Classes and Objects: Example", "class Person:\u00a0 pass"], ["Python Inheritance: Create a class named Person, with\nfirstname and lastname properties, \nand a printname method", "class Person:\u00a0 def __init__(self, fname, lname):\u00a0\u00a0\u00a0 \n  self.firstname = fname\u00a0\u00a0\u00a0 self.lastname = lname\u00a0 \n  def printname(self):\u00a0\u00a0\u00a0 print(self.firstname, \n  self.lastname)#Use the Person class to create an object, and then \n  execute the printname method:x = Person(\"John\", \"Doe\")\n  x.printname()"], ["Python Inheritance: Create a class named Student, which will inherit the properties \nand methods from \nthe Person class", "class Student(Person):\u00a0 pass"], ["Python Inheritance: Use the Student class to create an object, \nand then execute the printname method", "x = Student(\"Mike\", \"Olsen\")x.printname()"], ["Python Inheritance: Add the __init__() function to the\nStudent class", "class Student(Person):\u00a0 def __init__(self, fname, lname):\u00a0\u00a0\u00a0 \n  #add properties etc."], ["Python Inheritance: Example", "class Student(Person):\u00a0 def __init__(self, fname, lname):\u00a0\u00a0\u00a0 \n  Person.__init__(self, fname, lname)"], ["Python Inheritance: Example", "class Student(Person):\u00a0 def __init__(self, fname, lname):\u00a0\u00a0\u00a0 \n    super().__init__(fname, lname)"], ["Python Inheritance: Add a property called graduationyear to the\nStudent class", "class Student(Person):\u00a0 def __init__(self, fname, lname):\u00a0\u00a0\u00a0 \n  super().__init__(fname, lname)\u00a0\u00a0\u00a0 self.graduationyear \n  = 2019"], ["Python Inheritance: Add a year parameter, and pass the correct \nyear when creating objects", "class Student(Person):\u00a0 def __init__(self, fname, lname, year):\u00a0\u00a0\u00a0 \n  super().__init__(fname, lname)\u00a0\u00a0\u00a0 self.graduationyear \n  = yearx = Student(\"Mike\", \"Olsen\", 2019)"], ["Python Inheritance: Add a method called welcome to the\nStudent class", "class Student(Person):\u00a0 def __init__(self, fname, lname, year):\u00a0\u00a0\u00a0 \n  super().__init__(fname, lname)\u00a0\u00a0\u00a0 self.graduationyear \n  = year\u00a0 def welcome(self):\u00a0\u00a0\u00a0 print(\"Welcome\", \n  self.firstname, self.lastname, \"to the class of\", self.graduationyear)"], ["Python Iterators: Return an iterator from a tuple, and print each value", "mytuple = (\"apple\", \"banana\", \"cherry\")myit = iter(mytuple)\n    print(next(myit))print(next(myit))print(next(myit))"], ["Python Iterators: Strings are also iterable objects, containing a sequence of characters", "mystr = \"banana\"myit = iter(mystr)\n    print(next(myit))print(next(myit))print(next(myit))\n    print(next(myit))print(next(myit))print(next(myit))"], ["Python Iterators: Iterate the values of a tuple", "mytuple = (\"apple\", \"banana\", \"cherry\")\nfor x in mytuple:\n    \u00a0 print(x)"], ["Python Iterators: Iterate the characters of a string", "mystr = \"banana\"\nfor x in mystr:\n    \u00a0 print(x)"], ["Python Iterators: Create an iterator that returns numbers, starting with 1, and each sequence \nwill increase by one (returning 1,2,3,4,5 etc.)", "class MyNumbers:\u00a0 def __iter__(self):\u00a0\u00a0\u00a0 self.a = \n  1\u00a0\u00a0\u00a0 return self\u00a0 def __next__(self):\u00a0\u00a0\u00a0 \n  x = self.a\u00a0\u00a0\u00a0 self.a += 1\u00a0\u00a0\u00a0 return x\nmyclass = MyNumbers()myiter =\n   iter(myclass)print(next(myiter))\n  print(next(myiter))print(next(myiter))print(next(myiter))\n  print(next(myiter))"], ["Python Iterators: Stop after 20 iterations", "class MyNumbers:\u00a0 def __iter__(self):\u00a0\u00a0\u00a0 self.a = \n  1\u00a0\u00a0\u00a0 return self\u00a0 def __next__(self):\u00a0\u00a0\u00a0 \n  if self.a <= 20:\u00a0\u00a0\u00a0\u00a0\u00a0 x = self.a\u00a0\u00a0\u00a0\u00a0\u00a0 \n  self.a += 1\u00a0\u00a0\u00a0\u00a0\u00a0 return x\u00a0\u00a0\u00a0 \n  else:\u00a0\u00a0\u00a0\u00a0\u00a0 raise StopIterationmyclass = \n  MyNumbers()myiter =\n   iter(myclass)for x in myiter:\u00a0 \n  print(x)"], ["Python Polymorphism: Example", "x = \"Hello World!\"\n\nprint(len(x))"], ["Python Polymorphism: Example", "mytuple = (\"apple\", \"banana\", \"cherry\")\n\nprint(len(mytuple))"], ["Python Polymorphism: Example", "thisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}\n\nprint(len(thisdict))"], ["Python Polymorphism: Different classes with the same method", "class Car:\n\u00a0\u00a0def __init__(self, brand, model):\n\u00a0\u00a0\u00a0\u00a0self.brand = brand\n\u00a0\u00a0\u00a0\u00a0self.model = model\n\n\u00a0\u00a0def move(self):\n\u00a0\u00a0\u00a0 print(\"Drive!\")\n\nclass Boat:\n\u00a0\u00a0def __init__(self, brand, model):\n\u00a0\u00a0\u00a0\u00a0self.brand = brand\n\u00a0\u00a0\u00a0\u00a0self.model = model\n\n\u00a0\u00a0def move(self):\n\u00a0\u00a0\u00a0\u00a0print(\"Sail!\")\n\nclass Plane:\n\u00a0\u00a0def __init__(self, brand, model):\n\u00a0\u00a0\u00a0\u00a0self.brand = brand\n\u00a0\u00a0\u00a0\u00a0self.model = model\n\n\u00a0\u00a0def move(self):\n\u00a0\u00a0\u00a0\u00a0print(\"Fly!\")\n\ncar1 = Car(\"Ford\", \"Mustang\")  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#Create a Car \n    class\nboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat class\nplane1 = Plane(\"Boeing\", \"747\") \u00a0\u00a0\u00a0\u00a0#Create a Plane class\n\nfor x in (car1, boat1, plane1):\n\u00a0\u00a0x.move()"], ["Python Polymorphism: Create a class called Vehicle and make Car, \nBoat, Plane\n  child classes of \n  Vehicle", "class Vehicle:\u00a0 def __init__(self, brand, model):\u00a0\u00a0\u00a0 \n    self.brand = brand\u00a0\u00a0\u00a0 self.model = model\u00a0 \n    def move(self):\u00a0\u00a0\u00a0 print(\"Move!\")class \n    Car(Vehicle):\u00a0 passclass Boat(Vehicle):\u00a0 def \n    move(self):\u00a0\u00a0\u00a0 print(\"Sail!\")class \n    Plane(Vehicle):\u00a0 def move(self):\u00a0\u00a0\u00a0 \n    print(\"Fly!\")car1 = Car(\"Ford\", \"Mustang\") #Create a Car object\n    boat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat objectplane1 = \n    Plane(\"Boeing\", \"747\") #Create a Plane objectfor x in (car1, boat1, \n    plane1):\u00a0 print(x.brand)\u00a0 print(x.model)\u00a0 x.move()"], ["Python Scope: A variable created inside a function is available inside that function", "def myfunc():\u00a0 x = 300\u00a0 print(x)myfunc()"], ["Python Scope: The local variable can be accessed from a function within the function", "def myfunc():\u00a0 x = 300\u00a0 def myinnerfunc():\u00a0 \u00a0 print(x)\u00a0 \n  myinnerfunc()myfunc()"], ["Python Scope: A variable created outside of a function is global and can be used by \n  anyone", "x = 300def myfunc():\u00a0 print(x)myfunc()print(x)"], ["Python Scope: The function will print the local x, and \n  then the code will print the global x", "x = 300def myfunc():\u00a0 x = 200\u00a0 \n    print(x)myfunc()print(x)"], ["Python Scope: If you use the global keyword, the variable belongs to the global scope", "def myfunc():\u00a0 global x\u00a0 x = 300myfunc()\n    print(x)"], ["Python Scope: To change the value of a global variable inside a function, refer to the \n  variable by using the global keyword", "x = 300def myfunc():\u00a0 global x\u00a0 x = 200myfunc()\nprint(x)"], ["Python Modules: Save this code in a file named mymodule.p", "def greeting(name):\u00a0 print(\"Hello, \" + name)"], ["Python Modules: Import the module named mymodule, and call the greeting function", "import mymodulemymodule.greeting(\"Jonathan\")"], ["Python Modules: Save this code in the file mymodule.p", "person1 = {\u00a0 \"name\": \"John\",\u00a0 \"age\": 36,\u00a0 \n  \"country\": \"Norway\"}"], ["Python Modules: Import the module named mymodule, and access the person1 dictionary", "import mymodulea = mymodule.person1[\"age\"]print(a)"], ["Python Modules: Create an alias for mymodule called mx", "import mymodule as mxa = mx.person1[\"age\"]print(a)"], ["Python Modules: Import and use the platform module", "import platformx = platform.system()print(x)"], ["Python Modules: List all the defined names belonging to the platform module", "import platformx = dir(platform)print(x)"], ["Python Modules: The module named mymodule has one function \nand one dictionary", "def greeting(name):\u00a0 print(\"Hello, \" + name)person1 \n  = {\u00a0 \"name\": \"John\",\u00a0 \"age\": 36,\u00a0 \"country\": \n  \"Norway\"}"], ["Python Modules: Import only the person1 dictionary from the module", "from mymodule import person1print (person1[\"age\"])"], ["Python Datetime: Import the datetime module and display the current date", "import datetimex = datetime.datetime.now()print(x)"], ["Python Datetime: Return the year and name of weekday", "import datetimex = datetime.datetime.now()print(x.year)\n  print(x.strftime(\"%A\"))"], ["Python Datetime: Create a date object", "import datetimex = datetime.datetime(2020, 5, 17)\nprint(x)"], ["Python Datetime: Display the name of the month", "import datetimex = datetime.datetime(2018, 6, 1)print(x.strftime(\"%B\"))"], ["Python Math: Example", "x = min(5, 10, 25)y = max(5, 10, 25)print(x)print(y)"], ["Python Math: Example", "x = abs(-7.25)print(x)"], ["Python Math: Return the value of 4 to the power of 3 (same as 4 * 4 * 4)", "x = pow(4, 3)print(x)"], ["Python Math: Example", "import math"], ["Python Math: Example", "import \n    mathx = math.sqrt(64)print(x)"], ["Python Math: Example", "import \n    mathx = math.ceil(1.4)y = math.floor(1.4)print(x) # \n    returns 2print(y) # returns 1"], ["Python Math: Example", "import \n    mathx = math.piprint(x)"], ["Python JSON: Import the json module", "import json"], ["Python JSON: Convert from JSON to Python", "import json# some JSON:x =\u00a0 '{ \"name\":\"John\", \"age\":30, \"city\":\"New \n  York\"}'# parse x:y = json.loads(x)# the result is a \n  Python dictionary:print(y[\"age\"])"], ["Python JSON: Convert from Python to JSON", "import json# a Python object (dict):x = {\u00a0 \"name\": \n  \"John\",\u00a0 \"age\": 30,\u00a0 \"city\": \"New York\"}# \n  convert into JSON:y = json.dumps(x)# the result is a JSON string:\n  print(y)"], ["Python JSON: Convert Python objects into JSON strings, and print the values", "import jsonprint(json.dumps({\"name\": \"John\", \"age\": 30}))print(json.dumps([\"apple\", \n  \"bananas\"]))print(json.dumps((\"apple\", \"bananas\")))\n  print(json.dumps(\"hello\"))print(json.dumps(42))print(json.dumps(31.76))print(json.dumps(True))print(json.dumps(False))print(json.dumps(None))"], ["Python JSON: Convert a Python object containing all the legal data types", "import jsonx = {\u00a0 \"name\": \n  \"John\",\u00a0 \"age\": 30,\u00a0 \"married\": True,\u00a0 \n  \"divorced\": False,\u00a0 \"children\": (\"Ann\",\"Billy\"),\u00a0 \"pets\": \n  None,\u00a0 \"cars\": [\u00a0\u00a0\u00a0 {\"model\": \"BMW 230\", \"mpg\": \n  27.5},\u00a0\u00a0\u00a0 {\"model\": \"Ford Edge\", \"mpg\": 24.1}\u00a0 ]\n  }print(json.dumps(x))"], ["Python JSON: Use the indent parameter to define the numbers \nof indents", "json.dumps(x, indent=4)"], ["Python JSON: Use the separators parameter to change the \ndefault separator", "json.dumps(x, indent=4, separators=(\". \", \" = \"))"], ["Python JSON: Use the sort_keys parameter to specify if \nthe result should be sorted or not", "json.dumps(x, indent=4, sort_keys=True)"], ["Python RegEx: Example", "import re"], ["Python RegEx: Search the string to see if it starts with \"The\" and ends with \"Spain\"", "import \n    retxt = \"The rain in Spain\"x = re.search(\"^The.*Spain$\", txt)"], ["Python RegEx: Print a list of all matches", "import retxt = \"The rain in Spain\"x = re.findall(\"ai\", \n  txt)\n  print(x)"], ["Python RegEx: Return an empty list if no match was found", "import retxt = \"The rain in Spain\"x = re.findall(\"Portugal\", \n  txt)\n  print(x)"], ["Python RegEx: Search for the first white-space character in the string", "import retxt = \"The rain in Spain\"x = re.search(\"\\s\", \n  txt)\nprint(\"The first white-space character is located in \n  position:\", x.start())"], ["Python RegEx: Make a search that returns no match", "import retxt = \"The rain in Spain\"x = re.search(\"Portugal\", \n  txt)\n  print(x)"], ["Python RegEx: Split at each white-space character", "import retxt = \"The rain in Spain\"x = re.split(\"\\s\", \n  txt)\n  print(x)"], ["Python RegEx: Split the string only at the first occurrence", "import retxt = \"The rain in Spain\"x = re.split(\"\\s\", \n  txt, \n  1)\n  print(x)"], ["Python RegEx: Replace every white-space character with the number 9", "import retxt = \"The rain in Spain\"x = re.sub(\"\\s\", \n  \"9\", txt)\n  print(x)"], ["Python RegEx: Replace the first 2 occurrences", "import retxt = \"The rain in Spain\"x = re.sub(\"\\s\", \n  \"9\", txt, 2)\n  print(x)"], ["Python RegEx: Do a search that will return a Match Object", "import retxt = \"The rain in Spain\"x = re.search(\"ai\", \n  txt)\n  print(x) #this will print an object"], ["Python RegEx: Print the position (start- and end-position) of the first match occurrence", "import re\n    txt = \"The rain in Spain\"\n    x = re.search(r\"\\bS\\w+\", txt)\n    print(x.span())"], ["Python RegEx: Print the string passed into the function", "import re\n    txt = \"The rain in Spain\"\n    x = re.search(r\"\\bS\\w+\", txt)\n    print(x.string)"], ["Python RegEx: Print the part of the string where there was a match", "import re\n    txt = \"The rain in Spain\"\n    x = re.search(r\"\\bS\\w+\", txt)\n    print(x.group())"], ["Python PIP: Import and use \"camelcase\"", "import camelcasec = camelcase.CamelCase()txt = \"hello world\"\nprint(c.hump(txt))"], ["Python Try Except: The try block will generate an exception, \n  because x is not defined", "try:\u00a0 print(x)except:\u00a0 print(\"An exception occurred\")"], ["Python Try Except: Print one message if the try block raises a NameError and another \n  for other errors", "try:\u00a0 print(x)except NameError:\u00a0 print(\"Variable x \n  is not defined\")except:\u00a0 print(\"Something else went \n  wrong\")"], ["Python Try Except: In this example, the try block does not \n  generate any error", "try:\u00a0 print(\"Hello\")except:\u00a0 print(\"Something went \n  wrong\")else:\u00a0 print(\"Nothing went wrong\")"], ["Python Try Except: Example", "try:\u00a0 print(x)except:\u00a0 print(\"Something went \n  wrong\")finally:\u00a0 print(\"The 'try except' is finished\")"], ["Python Try Except: Try to open and write to a file that is not writable", "try:\u00a0 f = open(\"demofile.txt\")\u00a0 try:\u00a0\u00a0\u00a0 \n  f.write(\"Lorum Ipsum\")\u00a0 except:\u00a0\u00a0\u00a0 \n  print(\"Something went wrong when writing to the file\")\u00a0 finally:\u00a0\u00a0\u00a0 \n  f.close()except:\u00a0 print(\"Something went wrong when opening the \n  file\")"], ["Python Try Except: Raise an error and stop the program if x is lower than 0", "x = -1if x < 0:\u00a0 raise Exception(\"Sorry, no numbers below \n    zero\")"], ["Python Try Except: Raise a TypeError if x is not an integer", "x = \"hello\"if not type(x) is int:\u00a0 raise TypeError(\"Only \n    integers are allowed\")"], ["Python User Input: Example", "username = input(\"Enter username:\")\nprint(\"Username is: \" + username)"], ["Python User Input: Example", "username = raw_input(\"Enter username:\")\nprint(\"Username \n  is: \" + username)"], ["Python String Formatting: Add a placeholder where you want to display the price", "price = 49txt = \"The price is {} dollars\"print(txt.format(price))"], ["Python String Formatting: Format the price to be displayed as a number with two decimals", "txt = \"The price is {:.2f} dollars\""], ["Python String Formatting: Example", "print(txt.format(price, itemno, count))"], ["Python String Formatting: Example", "quantity = 3itemno = 567price = 49myorder = \"I want {} pieces of \n  item number {} for {:.2f} dollars.\"print(myorder.format(quantity, itemno, price))"], ["Python String Formatting: Example", "quantity = 3itemno = 567price = 49myorder = \"I want {0} pieces of \n  item number {1} for {2:.2f} dollars.\"print(myorder.format(quantity, itemno, price))"], ["Python String Formatting: Example", "age = 36name = \"John\"txt = \"His name is {1}. {1} is {0} years old.\"print(txt.format(age, \n  name))"], ["Python String Formatting: Example", "myorder = \"I have a {carname}, it is a {model}.\"print(myorder.format(carname \n  = \"Ford\", model = \"Mustang\"))"], ["Python File Open: Example", "f = open(\"demofile.txt\")"], ["Python File Open: Example", "f = open(\"demofile.txt\", \"rt\")"], ["Python File Open: Example", "f = open(\"demofile.txt\", \"r\")print(f.read())"], ["Python File Open: Open a file on a different location", "f = open(\"D:\\\\myfiles\\welcome.txt\", \"r\")print(f.read())"], ["Python File Open: Return the 5 first characters of the file", "f = open(\"demofile.txt\", \"r\")print(f.read(5))"], ["Python File Open: Read one line of the file", "f = open(\"demofile.txt\", \"r\")print(f.readline())"], ["Python File Open: Read two lines of the file", "f = open(\"demofile.txt\", \"r\")print(f.readline())print(f.readline())"], ["Python File Open: Loop through the file line by line", "f = open(\"demofile.txt\", \"r\")for x in f:\u00a0 print(x)"], ["Python File Open: Close the file when you are finish with it", "f = open(\"demofile.txt\", \"r\")print(f.readline())\n  f.close()"], ["Python File Write: Open the file \"demofile2.txt\" and append content to the file", "f = open(\"demofile2.txt\", \"a\")f.write(\"Now the file has more content!\")\n  f.close()#open and read the file after the appending:f = \n  open(\"demofile2.txt\", \"r\")print(f.read())"], ["Python File Write: Open the file \"demofile3.txt\" and overwrite the content", "f = open(\"demofile3.txt\", \"w\")\n  f.write(\"Woops! I have deleted the content!\")f.close()\n  #open and read the file after the overwriting:f = open(\"demofile3.txt\", \"r\")\n  print(f.read())"], ["Python File Write: Create a file called \"myfile.txt\"", "f = open(\"myfile.txt\", \"x\")"], ["Python File Write: Create a new file if it does not exist", "f = open(\"myfile.txt\", \"w\")"], ["Python Delete File: Remove the file \"demofile.txt\"", "import osos.remove(\"demofile.txt\")"], ["Python Delete File: Check if file exists, then delete it", "import osif os.path.exists(\"demofile.txt\"):\u00a0 os.remove(\"demofile.txt\")\n  else:\u00a0 print(\"The file does not exist\")"], ["Python Delete File: Remove the folder \"myfolder\"", "import osos.rmdir(\"myfolder\")"], ["NumPy Tutorial: Create a NumPy array", "import numpy as np\n\narr = np.array([1, 2, 3, 4, 5])print(arr)\nprint(type(arr))"], ["Pandas Tutorial: Load a CSV file into a Pandas DataFrame", "import pandas as pddf = pd.read_csv('data.csv')print(df.to_string())"], ["SciPy Tutorial: How many cubic meters are in one liter", "from scipy import constants\n\n  print(constants.liter)"], ["Matplotlib Getting Started: Example", "import matplotlib"], ["Matplotlib Getting Started: Example", "import matplotlibprint(matplotlib.__version__)"], ["Matplotlib Pyplot: Example", "import matplotlib.pyplot as plt"], ["Matplotlib Pyplot: Draw a line in a diagram from position (0,0) to position (6,250)", "import matplotlib.pyplot as plt\nimport numpy as np\n\n  xpoints = np.array([0, 6])ypoints = np.array([0, 250])plt.plot(xpoints, \n  ypoints)\nplt.show()"], ["Matplotlib Plotting: Draw a line in a diagram from position (1, 3) to position (8, 10)", "import matplotlib.pyplot as plt\nimport numpy as np\n\nxpoints = np.array([1, 8])\nypoints = np.array([3, 10])\n\nplt.plot(xpoints, ypoints)\nplt.show()"], ["Matplotlib Plotting: Draw two points in the diagram, one at position (1, 3) and one in position (8, 10)", "import matplotlib.pyplot as plt\nimport numpy as np\n\nxpoints = np.array([1, 8])\nypoints = np.array([3, 10])\n\nplt.plot(xpoints, ypoints, 'o')\nplt.show()"], ["Matplotlib Plotting: Draw a line in a diagram from position (1, 3) to (2, 8) then to (6, 1) and finally to position (8, 10)", "import matplotlib.pyplot as plt\nimport numpy as np\n\nxpoints = np.array([1, 2, 6, 8])\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(xpoints, ypoints)\nplt.show()"], ["Matplotlib Plotting: Plotting without x-points", "import matplotlib.pyplot as plt\nimport numpy as np\n\n  ypoints = np.array([3, 8, 1, 10, 5, 7])\n\nplt.plot(ypoints)\nplt.show()"], ["Matplotlib Markers: Mark each point with a circle", "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, marker = 'o')\nplt.show()"], ["Matplotlib Markers: Mark each point with a star", "...\n\nplt.plot(ypoints, marker = '*')\n..."], ["Matplotlib Markers: Mark each point with a circle", "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, 'o:r')\nplt.show()"], ["Matplotlib Markers: Set the size of the markers to 20", "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, marker = 'o', ms = 20)\nplt.show()"], ["Matplotlib Markers: Set the EDGE color to red", "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, marker = 'o', ms = 20, mec = 'r')\nplt.show()"], ["Matplotlib Markers: Set the FACE color to red", "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, marker = 'o', ms = 20, mfc = 'r')\nplt.show()"], ["Matplotlib Markers: Set the color of both the edge and the face to red", "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, marker = 'o', ms = 20, mec = 'r', mfc = 'r')\nplt.show()"], ["Matplotlib Markers: Mark each point with a beautiful green color", "...\n\nplt.plot(ypoints, marker = 'o', ms = 20, mec = '#4CAF50', mfc = '#4CAF50')\n..."], ["Matplotlib Markers: Mark each point with the color named \"hotpink\"", "...\n\nplt.plot(ypoints, marker = 'o', ms = 20, mec = 'hotpink', mfc = 'hotpink')\n..."], ["Matplotlib Line: Use a dotted line", "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, linestyle = 'dotted')\nplt.show()"], ["Matplotlib Line: Use a dashed line", "plt.plot(ypoints, linestyle = 'dashed')"], ["Matplotlib Line: Shorter syntax", "plt.plot(ypoints, ls = ':')"], ["Matplotlib Line: Set the line color to red", "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, color = 'r')\nplt.show()"], ["Matplotlib Line: Plot with a beautiful green line", "...\n\nplt.plot(ypoints, c = '#4CAF50')\n..."], ["Matplotlib Line: Plot with the color named \"hotpink\"", "...\n\nplt.plot(ypoints, c = 'hotpink')\n..."], ["Matplotlib Line: Plot with a 20.5pt wide line", "import matplotlib.pyplot as plt\nimport numpy as np\n\nypoints = np.array([3, 8, 1, 10])\n\nplt.plot(ypoints, linewidth = '20.5')\nplt.show()"], ["Matplotlib Line: Draw two lines by specifying a plt.plot() function for each line", "import matplotlib.pyplot as plt\nimport numpy as np\n\ny1 = np.array([3, 8, 1, 10])\ny2 = np.array([6, 2, 7, 11])\n\nplt.plot(y1)\nplt.plot(y2)\n\nplt.show()"], ["Matplotlib Line: Draw two lines by specifiyng the x- and y-point values for both lines", "import matplotlib.pyplot as plt\nimport numpy as np\n\nx1 = np.array([0, 1, 2, 3])\ny1 = np.array([3, 8, 1, 10])\n\nx2 = np.array([0, 1, 2, 3])\ny2 = np.array([6, 2, 7, 11])\n\nplt.plot(x1, y1, x2, y2)\nplt.show()"], ["Matplotlib Labels and Title: Add labels to the x- and y-axis", "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])plt.plot(x, y)plt.xlabel(\"Average \n  Pulse\")plt.ylabel(\"Calorie Burnage\")plt.show()"], ["Matplotlib Labels and Title: Add a plot title and labels for the x- and y-axis", "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])plt.plot(x, y)plt.title(\"Sports Watch Data\")plt.xlabel(\"Average \n  Pulse\")plt.ylabel(\"Calorie Burnage\")plt.show()"], ["Matplotlib Labels and Title: Set font properties for the title and labels", "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])font1 = {'family':'serif','color':'blue','size':20}\n  font2 = {'family':'serif','color':'darkred','size':15}plt.title(\"Sports \n  Watch Data\", fontdict = font1)plt.xlabel(\"Average Pulse\", fontdict = \n  font2)plt.ylabel(\"Calorie Burnage\", fontdict = font2)plt.plot(x, \n  y)plt.show()"], ["Matplotlib Labels and Title: Position the title to the left", "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])plt.title(\"Sports Watch Data\", loc = 'left')plt.xlabel(\"Average \n  Pulse\")plt.ylabel(\"Calorie Burnage\")plt.plot(x, \n  y)plt.show()"], ["Matplotlib Adding Grid Lines: Add grid lines to the plot", "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])plt.title(\"Sports Watch Data\")\n  plt.xlabel(\"Average Pulse\")plt.ylabel(\"Calorie Burnage\")plt.plot(x, \n  y)plt.grid()plt.show()"], ["Matplotlib Adding Grid Lines: Display only grid lines for the x-axis", "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])plt.title(\"Sports Watch Data\")\n  plt.xlabel(\"Average Pulse\")plt.ylabel(\"Calorie Burnage\")plt.plot(x, \n  y)plt.grid(axis = 'x')plt.show()"], ["Matplotlib Adding Grid Lines: Display only grid lines for the y-axis", "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])plt.title(\"Sports Watch Data\")\n  plt.xlabel(\"Average Pulse\")plt.ylabel(\"Calorie Burnage\")plt.plot(x, \n  y)plt.grid(axis = 'y')plt.show()"], ["Matplotlib Adding Grid Lines: Set the line properties of the grid", "import numpy as npimport matplotlib.pyplot as pltx = np.array([80, \n  85, 90, 95, 100, 105, 110, 115, 120, 125])y = np.array([240, 250, 260, \n  270, 280, 290, 300, 310, 320, 330])plt.title(\"Sports Watch Data\")plt.xlabel(\"Average \n  Pulse\")plt.ylabel(\"Calorie Burnage\")plt.plot(x, \n  y)plt.grid(color = 'green', linestyle = '--', linewidth = 0.5)plt.show()"], ["Matplotlib Subplot: Draw 2 plots", "import matplotlib.pyplot as pltimport numpy as np#plot 1:x = \n  np.array([0, 1, 2, 3])y = np.array([3, 8, 1, 10])plt.subplot(1, 2, 1)\n  plt.plot(x,y)#plot 2:x = np.array([0, 1, 2, 3])y = np.array([10, 20, 30, \n  40])plt.subplot(1, 2, 2)plt.plot(x,y)plt.show()"], ["Matplotlib Subplot: Draw 2 plots on top of each other", "import matplotlib.pyplot as pltimport numpy as np#plot 1:x = \n  np.array([0, 1, 2, 3])y = np.array([3, 8, 1, 10])plt.subplot(2, 1, 1)\n  plt.plot(x,y)#plot 2:x = np.array([0, 1, 2, 3])y = np.array([10, 20, 30, \n  40])plt.subplot(2, 1, 2)plt.plot(x,y)plt.show()"], ["Matplotlib Subplot: Draw 6 plots", "import matplotlib.pyplot as pltimport numpy as npx = np.array([0, \n  1, 2, 3])y = np.array([3, 8, 1, 10])plt.subplot(2, 3, 1)\n  plt.plot(x,y)x = np.array([0, 1, 2, 3])y = np.array([10, 20, 30, \n  40])plt.subplot(2, 3, 2)plt.plot(x,y)x = np.array([0, 1, \n  2, 3])y = np.array([3, 8, 1, 10])plt.subplot(2, 3, 3)plt.plot(x,y)\nx = np.array([0, 1, 2, 3])y = np.array([10, 20, 30, 40])\n  plt.subplot(2, 3, 4)plt.plot(x,y)x = np.array([0, 1, 2, 3])y = \n  np.array([3, 8, 1, 10])plt.subplot(2, 3, 5)plt.plot(x,y)x \n  = np.array([0, 1, 2, 3])y = np.array([10, 20, 30, 40])plt.subplot(2, \n  3, 6)plt.plot(x,y)plt.show()"], ["Matplotlib Subplot: 2 plots, with titles", "import matplotlib.pyplot as pltimport numpy as np#plot 1:x = \n  np.array([0, 1, 2, 3])y = np.array([3, 8, 1, 10])plt.subplot(1, 2, 1)\n  plt.plot(x,y)plt.title(\"SALES\")#plot 2:x = np.array([0, 1, 2, 3])y = np.array([10, 20, 30, \n  40])plt.subplot(1, 2, 2)plt.plot(x,y)plt.title(\"INCOME\")\nplt.show()"], ["Matplotlib Subplot: Add a title for the entire figure", "import matplotlib.pyplot as pltimport numpy as np#plot 1:x = \n  np.array([0, 1, 2, 3])y = np.array([3, 8, 1, 10])plt.subplot(1, 2, 1)\n  plt.plot(x,y)plt.title(\"SALES\")#plot 2:x = np.array([0, 1, 2, 3])y = np.array([10, 20, 30, \n  40])plt.subplot(1, 2, 2)plt.plot(x,y)plt.title(\"INCOME\")\nplt.suptitle(\"MY SHOP\")plt.show()"], ["Matplotlib Scatter: A simple scatter plot", "import matplotlib.pyplot as pltimport numpy as npx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])plt.scatter(x, y)plt.show()"], ["Matplotlib Scatter: Draw two plots on the same figure", "import matplotlib.pyplot as pltimport numpy as np#day one, the age \n  and speed of 13 cars:x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\n  y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])plt.scatter(x, \n  y)#day two, the age and speed of 15 cars:x = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])y = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])\n  plt.scatter(x, y)plt.show()"], ["Matplotlib Scatter: Set your own color of the markers", "import matplotlib.pyplot as pltimport numpy as npx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\n  y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])plt.scatter(x, \n  y, color = 'hotpink')x = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])y = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])\n  plt.scatter(x, y, color = '#88c999')plt.show()"], ["Matplotlib Scatter: Set your own color of the markers", "import matplotlib.pyplot as pltimport numpy as npx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\n  y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])colors = np.array([\"red\",\"green\",\"blue\",\"yellow\",\"pink\",\"black\",\"orange\",\"purple\",\"beige\",\"brown\",\"gray\",\"cyan\",\"magenta\"])\nplt.scatter(x, y, c=colors)plt.show()"], ["Matplotlib Scatter: Create a color array, and specify a colormap in the scatter plot", "import matplotlib.pyplot as pltimport numpy as npx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\n  y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])colors = np.array([0, \n  10, 20, 30, 40, 45, 50, 55, 60, 70, 80, 90, 100])\nplt.scatter(x, y, c=colors, cmap='viridis')plt.show()"], ["Matplotlib Scatter: Include the actual colormap", "import matplotlib.pyplot as pltimport numpy as npx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\n  y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])colors = np.array([0, \n  10, 20, 30, 40, 45, 50, 55, 60, 70, 80, 90, 100])\nplt.scatter(x, y, c=colors, cmap='viridis')plt.colorbar()plt.show()"], ["Matplotlib Scatter: Set your own size for the markers", "import matplotlib.pyplot as pltimport numpy as npx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\n  y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])sizes = \n  np.array([20,50,100,200,500,1000,60,90,10,300,600,800,75])plt.scatter(x, \n  y, s=sizes)plt.show()"], ["Matplotlib Scatter: Set your own size for the markers", "import matplotlib.pyplot as pltimport numpy as npx = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])\n  y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])sizes = \n  np.array([20,50,100,200,500,1000,60,90,10,300,600,800,75])plt.scatter(x, \n  y, s=sizes, alpha=0.5)plt.show()"], ["Matplotlib Scatter: Create random arrays with 100 values for x-points, y-points, colors and \nsizes", "import matplotlib.pyplot as pltimport numpy as npx = \n  np.random.randint(100, size=(100))y = np.random.randint(100, size=(100))\n  colors = np.random.randint(100, size=(100))sizes = 10 * np.random.randint(100, \n  size=(100))plt.scatter(x, y, c=colors, s=sizes, alpha=0.5, cmap='nipy_spectral')\nplt.colorbar()plt.show()"], ["Matplotlib Bars: Draw 4 bars", "import matplotlib.pyplot as pltimport numpy as npx = np.array([\"A\", \n  \"B\", \"C\", \"D\"])y = np.array([3, 8, 1, 10])plt.bar(x,y)plt.show()"], ["Matplotlib Bars: Try it Yourself ", "x = [\"APPLES\", \"BANANAS\"]\ny = [400, 350]\nplt.bar(x, y)"], ["Matplotlib Bars: Draw 4 horizontal bars", "import matplotlib.pyplot as pltimport numpy as npx = np.array([\"A\", \n  \"B\", \"C\", \"D\"])y = np.array([3, 8, 1, 10])plt.barh(x, y)plt.show()"], ["Matplotlib Bars: Draw 4 red bars", "import matplotlib.pyplot as pltimport numpy as npx = np.array([\"A\", \n  \"B\", \"C\", \"D\"])y = np.array([3, 8, 1, 10])plt.bar(x, y, color = \"red\")plt.show()"], ["Matplotlib Bars: Draw 4 \"hot pink\" bars", "import matplotlib.pyplot as pltimport numpy as npx = np.array([\"A\", \n  \"B\", \"C\", \"D\"])y = np.array([3, 8, 1, 10])plt.bar(x, y, color = \"hotpink\")plt.show()"], ["Matplotlib Bars: Draw 4 bars with a beautiful green color", "import matplotlib.pyplot as pltimport numpy as npx = np.array([\"A\", \n  \"B\", \"C\", \"D\"])y = np.array([3, 8, 1, 10])plt.bar(x, y, color = \"#4CAF50\")plt.show()"], ["Matplotlib Bars: Draw 4 very thin bars", "import matplotlib.pyplot as pltimport numpy as npx = np.array([\"A\", \n  \"B\", \"C\", \"D\"])y = np.array([3, 8, 1, 10])plt.bar(x, y, width = 0.1)plt.show()"], ["Matplotlib Bars: Draw 4 very thin bars", "import matplotlib.pyplot as pltimport numpy as npx = np.array([\"A\", \n  \"B\", \"C\", \"D\"])y = np.array([3, 8, 1, 10])plt.barh(x, y, height = 0.1)plt.show()"], ["Matplotlib Histograms: A Normal Data Distribution by NumPy", "import numpy as npx = \n  np.random.normal(170, 10, 250)print(x)"], ["Matplotlib Histograms: A simple histogram", "import matplotlib.pyplot as pltimport numpy as npx = \n  np.random.normal(170, 10, 250)plt.hist(x)plt.show()"], ["Matplotlib Pie Charts: A simple pie chart", "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])plt.pie(y)plt.show()"], ["Matplotlib Pie Charts: A simple pie chart", "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])mylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]plt.pie(y, \n  labels = mylabels)plt.show()"], ["Matplotlib Pie Charts: Start the first wedge at 90 degrees", "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])mylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]plt.pie(y, \n  labels = mylabels, startangle = 90)plt.show()"], ["Matplotlib Pie Charts: Pull the \"Apples\" wedge 0.2 from the center of the pie", "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])mylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\n  myexplode = [0.2, 0, 0, 0]plt.pie(y, \n  labels = mylabels, explode = myexplode)plt.show()"], ["Matplotlib Pie Charts: Add a shadow", "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])mylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\n  myexplode = [0.2, 0, 0, 0]plt.pie(y, \n  labels = mylabels, explode = myexplode, shadow = True)plt.show()"], ["Matplotlib Pie Charts: Specify a new color for each wedge", "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])mylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\n  mycolors = [\"black\", \"hotpink\", \"b\", \"#4CAF50\"]plt.pie(y, labels = \n  mylabels, colors = mycolors)plt.show()"], ["Matplotlib Pie Charts: Add a legend", "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])mylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nplt.pie(y, labels = mylabels)plt.legend()plt.show()"], ["Matplotlib Pie Charts: Add a legend with a header", "import matplotlib.pyplot as pltimport numpy as npy = np.array([35, \n  25, 25, 15])mylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nplt.pie(y, labels = mylabels)plt.legend(title = \"Four Fruits:\")plt.show()"], ["Machine Learning - Mean Median Mode: Use the NumPy mean() method to find the \naverage speed", "import numpyspeed = [99,86,87,88,111,86,103,87,94,78,77,85,86]\nx = numpy.mean(speed)print(x)"], ["Machine Learning - Mean Median Mode: Use the NumPy median() method to find the \nmiddle value", "import numpyspeed = [99,86,87,88,111,86,103,87,94,78,77,85,86]\nx = numpy.median(speed)print(x)"], ["Machine Learning - Mean Median Mode: Using the NumPy module", "import numpyspeed = [99,86,87,88,86,103,87,94,78,77,85,86]\nx = numpy.median(speed)print(x)"], ["Machine Learning - Mean Median Mode: Use the SciPy mode() method to find the \nnumber that appears the most", "from scipy import statsspeed = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]x = stats.mode(speed)print(x)"], ["Machine Learning - Standard Deviation: Use the NumPy std() method to find the \nstandard deviation", "import numpyspeed = [86,87,88,86,87,85,86]\nx = numpy.std(speed)print(x)"], ["Machine Learning - Standard Deviation: Example", "import numpyspeed = [32,111,138,28,59,77,97]\nx = numpy.std(speed)print(x)"], ["Machine Learning - Standard Deviation: Use the NumPy var() method to find the variance", "import numpyspeed = [32,111,138,28,59,77,97]\nx = numpy.var(speed)print(x)"], ["Machine Learning - Standard Deviation: Use the NumPy std() method to find the standard deviation", "import numpyspeed = [32,111,138,28,59,77,97]\nx = numpy.std(speed)print(x)"], ["Machine Learning - Percentiles: Use the NumPy percentile() method to find \nthe percentiles", "import numpyages = \n  [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31]\nx = numpy.percentile(ages, 75)print(x)"], ["Machine Learning - Percentiles: What is the age that 90% of the people are younger than", "import numpyages = \n  [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31]\nx = numpy.percentile(ages, 90)print(x)"], ["Machine Learning - Data Distribution: Create an array containing 250 random floats between 0 and 5", "import numpyx = numpy.random.uniform(0.0, 5.0, 250)\nprint(x)"], ["Machine Learning - Data Distribution: Draw a histogram", "import numpyimport matplotlib.pyplot as pltx = \n  numpy.random.uniform(0.0, 5.0, 250)plt.hist(x, 5)plt.show()"], ["Machine Learning - Data Distribution: Create an array with 100000 random numbers, and display them using a \n  histogram with 100 bars", "import numpyimport matplotlib.pyplot as pltx = \n  numpy.random.uniform(0.0, 5.0, 100000)plt.hist(x, 100)plt.show()"], ["Machine Learning - Normal Data Distribution: A typical normal data distribution", "import numpyimport matplotlib.pyplot as pltx = \n  numpy.random.normal(5.0, 1.0, 100000)plt.hist(x, 100)plt.show()"], ["Machine Learning - Scatter Plot: Use the scatter() method to draw a scatter \n  plot diagram", "import matplotlib.pyplot as pltx = \n  [5,7,8,7,2,17,2,9,4,11,12,9,6]y = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]plt.scatter(x, y)\n  plt.show()"], ["Machine Learning - Scatter Plot: A scatter plot with 1000 dots", "import numpyimport matplotlib.pyplot as pltx = numpy.random.normal(5.0, \n  1.0, 1000)y = numpy.random.normal(10.0, 2.0, 1000)plt.scatter(x, y)\n  plt.show()"], ["Machine Learning - Linear Regression: Start by drawing a scatter plot", "import matplotlib.pyplot as pltx = [5,7,8,7,2,17,2,9,4,11,12,9,6]y = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]plt.scatter(x, y)plt.show()"], ["Machine Learning - Linear Regression: Import scipy and draw the line of Linear Regression", "import matplotlib.pyplot as pltfrom scipy import stats\nx = [5,7,8,7,2,17,2,9,4,11,12,9,6]y = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]slope, intercept, r, \n  p, std_err = stats.linregress(x, y)def myfunc(x):\u00a0 \n  return slope * x + interceptmymodel = list(map(myfunc, x))\n  plt.scatter(x, y)plt.plot(x, mymodel)plt.show()"], ["Machine Learning - Linear Regression: How well does my data fit in a linear regression", "from scipy import statsx = \n  [5,7,8,7,2,17,2,9,4,11,12,9,6]y = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]slope, intercept, r, \n  p, std_err = stats.linregress(x, y)print(r)"], ["Machine Learning - Linear Regression: Predict the speed of a 10 years old car", "from scipy import stats\nx = [5,7,8,7,2,17,2,9,4,11,12,9,6]y = \n  [99,86,87,88,111,86,103,87,94,78,77,85,86]slope, intercept, r, \n  p, std_err = stats.linregress(x, y)def myfunc(x):\u00a0 \n  return slope * x + interceptspeed = myfunc(10)\n  print(speed)"], ["Machine Learning - Linear Regression: These values for the x- and y-axis should result in a very bad fit for linear \n  regression", "import matplotlib.pyplot as pltfrom scipy import stats\nx = [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]y = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]slope, \n  intercept, r, p, std_err = stats.linregress(x, y)def \n  myfunc(x):\u00a0 return slope * x + interceptmymodel = list(map(myfunc, \n  x))plt.scatter(x, y)plt.plot(x, mymodel)plt.show()"], ["Machine Learning - Linear Regression: You should get a very low r value", "import numpyfrom scipy import statsx = \n  [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]y = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]slope, intercept, r, \n  p, std_err = stats.linregress(x, y)print(r)"], ["Machine Learning - Polynomial Regression: Start by drawing a scatter plot", "import matplotlib.pyplot as pltx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]y = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\n  plt.scatter(x, y)plt.show()"], ["Machine Learning - Polynomial Regression: Import numpy and \n  matplotlib then draw the line of \n  Polynomial Regression", "import numpyimport matplotlib.pyplot as pltx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]y = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))myline = numpy.linspace(1, 22, 100)plt.scatter(x, y)plt.plot(myline, mymodel(myline))\n  plt.show()"], ["Machine Learning - Polynomial Regression: How well does my data fit in a polynomial regression", "import numpyfrom sklearn.metrics import r2_scorex = \n  [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]y = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))print(r2_score(y, mymodel(x)))"], ["Machine Learning - Polynomial Regression: Predict the speed of a car passing at 17:00", "import numpyfrom sklearn.metrics import r2_scorex = \n  [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]y = \n  [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))speed = mymodel(17)print(speed)"], ["Machine Learning - Polynomial Regression: These values for the x- and y-axis should result in a very bad fit for \n  polynomial \n  regression", "import numpyimport matplotlib.pyplot as pltx = \n  [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]y = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))myline = numpy.linspace(2, 95, 100)\nplt.scatter(x, y)plt.plot(myline, mymodel(myline))plt.show()"], ["Machine Learning - Polynomial Regression: You should get a very low r-squared value", "import numpyfrom sklearn.metrics import r2_scorex = \n  [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]y = \n  [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]mymodel = \n  numpy.poly1d(numpy.polyfit(x, y, 3))print(r2_score(y, mymodel(x)))"], ["Machine Learning - Multiple Regression: See the whole example in action", "import pandasfrom sklearn import linear_modeldf = pandas.read_csv(\"data.csv\")\nX = df[['Weight', 'Volume']]y = df['CO2']regr = \n  linear_model.LinearRegression()regr.fit(X, y)#predict the CO2 \n  emission of a car where the weight is 2300kg, and the volume is 1300cm3:\n  predictedCO2 = regr.predict([[2300, 1300]])\nprint(predictedCO2)"], ["Machine Learning - Multiple Regression: Print the coefficient values of the regression object", "import pandasfrom sklearn import linear_modeldf = pandas.read_csv(\"data.csv\")\nX = df[['Weight', 'Volume']]y = df['CO2']regr = \n  linear_model.LinearRegression()regr.fit(X, y)print(regr.coef_)"], ["Machine Learning - Multiple Regression: Copy the example from before, but change the weight from 2300 to 3300", "import pandasfrom sklearn import linear_modeldf = pandas.read_csv(\"data.csv\")\nX = df[['Weight', 'Volume']]y = df['CO2']regr = \n  linear_model.LinearRegression()regr.fit(X, y)predictedCO2 = regr.predict([[3300, 1300]])\nprint(predictedCO2)"], ["Machine Learning - Scale: Scale all values in the Weight and Volume columns", "import pandasfrom sklearn import linear_modelfrom \n  sklearn.preprocessing import StandardScalerscale = StandardScaler()\ndf = pandas.read_csv(\"data.csv\")X = df[['Weight', 'Volume']]\nscaledX = scale.fit_transform(X)\n  print(scaledX)"], ["Machine Learning - Scale: Predict the CO2 emission from a 1.3 liter car that weighs 2300 kilograms", "import pandasfrom sklearn import linear_modelfrom \n  sklearn.preprocessing import StandardScalerscale = StandardScaler()\ndf = pandas.read_csv(\"data.csv\")X = df[['Weight', 'Volume']]\n  y = df['CO2']\nscaledX = scale.fit_transform(X)\n  regr = linear_model.LinearRegression()regr.fit(scaledX, y)scaled = \n  scale.transform([[2300, 1.3]])predictedCO2 = regr.predict([scaled[0]])\n  print(predictedCO2)"], ["Machine Learning - Train/Test: The x axis represents the number of minutes before making a purchase", "import numpyimport matplotlib.pyplot as pltnumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xplt.scatter(x, y)plt.show()"], ["Machine Learning - Train/Test: It looks like the original data set, so it seems to be a fair \nselection", "plt.scatter(train_x, \n  train_y)plt.show()"], ["Machine Learning - Train/Test: The testing set also looks like the original data set", "plt.scatter(test_x, \n  test_y)plt.show()"], ["Machine Learning - Train/Test: Draw a polynomial regression line through the data points", "import numpyimport \n  matplotlib.pyplot as pltnumpy.random.seed(2)x = \n  numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, 100) / x\ntrain_x = x[:80]train_y = y[:80]test_x = x[80:]test_y = \n  y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))\nmyline = numpy.linspace(0, 6, 100)plt.scatter(train_x, train_y)\n  plt.plot(myline, mymodel(myline))plt.show()"], ["Machine Learning - Train/Test: How well does my training data fit in a polynomial regression", "import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]\n  test_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))r2 = r2_score(train_y, mymodel(train_x))print(r2)"], ["Machine Learning - Train/Test: Let us find the R2 score when using testing data", "import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]\n  test_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))r2 = r2_score(test_y, mymodel(test_x))print(r2)"], ["Machine Learning - Train/Test: How much money will a buying customer spend, if she or he stays in the shop \n  for 5 minutes", "print(mymodel(5))"], ["Machine Learning - Decision Tree: Read and print the data set", "import pandasdf = pandas.read_csv(\"data.csv\")\nprint(df)"], ["Machine Learning - Decision Tree: Change string values into numerical values", "d = {'UK': 0, \n  'USA': 1, 'N': 2}df['Nationality'] = df['Nationality'].map(d)d = \n  {'YES': 1, 'NO': 0}df['Go'] = df['Go'].map(d)print(df)"], ["Machine Learning - Decision Tree: X is the feature columns, \ny is the target column", "features = ['Age', 'Experience', 'Rank', 'Nationality']X = df[features]y = df['Go']\n  print(X)print(y)"], ["Machine Learning - Decision Tree: Create and display a Decision Tree", "import pandasfrom sklearn import treefrom sklearn.tree import \n  DecisionTreeClassifierimport matplotlib.pyplot as pltdf = \n  pandas.read_csv(\"data.csv\")d = {'UK': 0, 'USA': 1, 'N': 2}df['Nationality'] \n  = df['Nationality'].map(d)d = {'YES': 1, 'NO': 0}df['Go'] = df['Go'].map(d)\nfeatures = ['Age', 'Experience', 'Rank', 'Nationality']X = df[features]\n  y = df['Go']dtree = DecisionTreeClassifier()dtree = dtree.fit(X, \n  y)tree.plot_tree(dtree, feature_names=features)"], ["Machine Learning - Decision Tree: Use predict() method to predict new values", "print(dtree.predict([[40, 10, 7, 1]]))"], ["Machine Learning - Decision Tree: What would the answer be if the comedy rank was 6", "print(dtree.predict([[40, 10, 6, 1]]))"], ["Machine Learning - Confusion Matrix: ", "import matplotlib.pyplot as pltimport numpyfrom sklearn import metrics\nactual = numpy.random.binomial(1,.9,size = 1000)predicted = \n  numpy.random.binomial(1,.9,size = 1000)confusion_matrix = \n  metrics.confusion_matrix(actual, predicted)cm_display = \n  metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, \n  display_labels = [False, True])cm_display.plot()plt.show()"], ["Machine Learning - Confusion Matrix: Example", "Accuracy = metrics.accuracy_score(actual, predicted)"], ["Machine Learning - Confusion Matrix: Example", "Precision = metrics.precision_score(actual, predicted)"], ["Machine Learning - Confusion Matrix: Example", "Sensitivity_recall = metrics.recall_score(actual, predicted)"], ["Machine Learning - Confusion Matrix: Example", "Specificity = metrics.recall_score(actual, predicted, pos_label=0)"], ["Machine Learning - Confusion Matrix: Example", "F1_score = metrics.f1_score(actual, predicted)"], ["Machine Learning - Confusion Matrix: Example", "#metrics\nprint({\"Accuracy\":Accuracy,\"Precision\":Precision,\"Sensitivity_recall\":Sensitivity_recall,\"Specificity\":Specificity,\"F1_score\":F1_score})"], ["Machine Learning - Hierarchical Clustering: Start by visualizing some data points", "import numpy as npimport matplotlib.pyplot as pltx = [4, 5, 10, 4, \n  3, 11, 14 , 6, 10, 12]y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\n  plt.scatter(x, y)plt.show()"], ["Machine Learning - Hierarchical Clustering: ", "import numpy as npimport matplotlib.pyplot as pltfrom \n  scipy.cluster.hierarchy import dendrogram, linkagex = [4, 5, 10, 4, 3, \n  11, 14 , 6, 10, 12]y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\n  data = list(zip(x, y))linkage_data = linkage(data, method='ward', \n  metric='euclidean')dendrogram(linkage_data)plt.show()"], ["Machine Learning - Hierarchical Clustering: ", "import numpy as npimport matplotlib.pyplot as pltfrom sklearn.cluster \n  import AgglomerativeClusteringx = [4, 5, 10, 4, 3, 11, 14 , 6, 10, 12]\n  y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]data = list(zip(x, y))\nhierarchical_cluster = AgglomerativeClustering(n_clusters=2, affinity='euclidean', \n  linkage='ward')labels = hierarchical_cluster.fit_predict(data)\n  plt.scatter(x, y, c=labels)plt.show()"], ["Machine Learning - Logistic Regression: See the whole example in action", "import numpy\nfrom sklearn import linear_model\n\n#Reshaped for Logistic function.\nX = numpy.array([3.78, 2.44, 2.09, 0.14, 1.72, 1.65, 4.92, 4.37, 4.96, 4.52, 3.69, 5.88]).reshape(-1,1)\ny = numpy.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])\n\nlogr = linear_model.LogisticRegression()\nlogr.fit(X,y)\n\n#predict if tumor is cancerous where the size is 3.46mm:\npredicted = logr.predict(numpy.array([3.46]).reshape(-1,1))\nprint(predicted)"], ["Machine Learning - Logistic Regression: See the whole example in action", "import numpy\nfrom sklearn import linear_model\n\n#Reshaped for Logistic function.\nX = numpy.array([3.78, 2.44, 2.09, 0.14, 1.72, 1.65, 4.92, 4.37, 4.96, 4.52, 3.69, 5.88]).reshape(-1,1)\ny = numpy.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])\n\nlogr = linear_model.LogisticRegression()\nlogr.fit(X,y)\n\nlog_odds = logr.coef_ \nodds = numpy.exp(log_odds)\n\nprint(odds)"], ["Machine Learning - Logistic Regression: See the whole example in action", "import numpy\nfrom sklearn import linear_model\n\nX = numpy.array([3.78, 2.44, 2.09, 0.14, 1.72, 1.65, 4.92, 4.37, 4.96, 4.52, 3.69, 5.88]).reshape(-1,1)\ny = numpy.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])\n\nlogr = linear_model.LogisticRegression()\nlogr.fit(X,y)\n\ndef logit2prob(logr, X):\n    \u00a0\n    log_odds = logr.coef_ * X + logr.intercept_\n    \u00a0\n    odds = numpy.exp(log_odds)\n    \u00a0\n    probability = odds / (1 + odds)\n    \u00a0\n    return(probability)\n\nprint(logit2prob(logr, X))"], ["Machine Learning - Grid Search: Example", "from sklearn import datasetsfrom sklearn.linear_model import \n  LogisticRegressioniris = datasets.load_iris()X = iris['data']\n  y = iris['target']logit = LogisticRegression(max_iter = 10000)\n  print(logit.fit(X,y))print(logit.score(X,y))"], ["Machine Learning - Grid Search: Example", "from sklearn import datasetsfrom sklearn.linear_model import \n  LogisticRegressioniris = datasets.load_iris()X = iris['data']\n  y = iris['target']logit = LogisticRegression(max_iter = 10000)\n  C = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]\n  scores = []for choice in C:\u00a0 logit.set_params(C=choice)\u00a0 \n  logit.fit(X, y)\u00a0 scores.append(logit.score(X, y))\n  print(scores)"], ["Preprocessing - Categorical Data: Car       Model  Volume  Weight  CO2\n  0       Toyoty        Aygo    1000     790   99\n  1   Mitsubishi  Space Star    1200    1160   95\n  2        Skoda      Citigo    1000     929   95\n  3         Fiat         500     900     865   90\n  4         Mini      Cooper    1500    1140  105\n  5           VW         Up!    1000     929  105\n  6        Skoda       Fabia    1400    1109   90\n  7     Mercedes     A-Class    1500    1365   92\n  8         Ford      Fiesta    1500    1112   98\n  9         Audi          A1    1600    1150   99\n  10     Hyundai         I20    1100     980   99\n  11      Suzuki       Swift    1300     990  101\n  12        Ford      Fiesta    1000    1112   99\n  13       Honda       Civic    1600    1252   94\n  14      Hundai         I30    1600    1326   97\n  15        Opel       Astra    1600    1330   97\n  16         BMW           1    1600    1365   99\n  17       Mazda           3    2200    1280  104\n  18       Skoda       Rapid    1600    1119  104\n  19        Ford       Focus    2000    1328  105\n  20        Ford      Mondeo    1600    1584   94\n  21        Opel    Insignia    2000    1428   99\n  22    Mercedes     C-Class    2100    1365   99\n  23       Skoda     Octavia    1600    1415   99\n  24       Volvo         S60    2000    1415   99\n  25    Mercedes         CLA    1500    1465  102\n  26        Audi          A4    2000    1490  104\n  27        Audi          A6    2000    1725  114\n  28       Volvo         V70    1600    1523  109\n  29         BMW           5    2000    1705  114\n  30    Mercedes     E-Class    2100    1605  115\n  31       Volvo        XC70    2000    1746  117\n  32        Ford       B-Max    1600    1235  104\n  33         BMW         216    1600    1390  108\n  34        Opel      Zafira    1600    1405  109\n  35    Mercedes         SLK    2500    1395  12", "import pandas as pd\n\ncars = pd.read_csv('data.csv')\nprint(cars.to_string())"], ["Preprocessing - Categorical Data: One Hot Encode the Car column", "import pandas as pdcars = pd.read_csv('data.csv')ohe_cars = \n  pd.get_dummies(cars[['Car']])print(ohe_cars.to_string())"], ["Preprocessing - Categorical Data: [122.45153299", "import pandas\nfrom sklearn import linear_model\n\ncars = pandas.read_csv(\"data.csv\")\nohe_cars = pandas.get_dummies(cars[['Car']])\n\nX = pandas.concat([cars[['Volume', 'Weight']], ohe_cars], axis=1)\ny = cars['CO2']\n\nregr = linear_model.LinearRegression()\nregr.fit(X,y)\n\n##predict the CO2 emission of a Volvo where the weight is 2300kg, and the volume is 1300cm3:\npredictedCO2 = regr.predict([[2300, 1300,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]])\n\nprint(predictedCO2)"], ["Preprocessing - Categorical Data: color\n  0  blue\n  1   re", "import pandas as pdcolors = pd.DataFrame({'color': ['blue', 'red']})\nprint(colors)"], ["Preprocessing - Categorical Data: color_red\n  0          0\n  1          ", "import pandas as pdcolors = pd.DataFrame({'color': ['blue', 'red']})\n  dummies = pd.get_dummies(colors, drop_first=True)print(dummies)"], ["Preprocessing - Categorical Data: color_green  color_red  color\n  0            0          0   blue\n  1            0          1    red\n  2            1          0  gree", "import pandas as pdcolors = pd.DataFrame({'color': ['blue', 'red', \n  'green']})dummies = pd.get_dummies(colors, drop_first=True)\n  dummies['color'] = colors['color']print(dummies)"], ["Machine Learning - K-means: Start by visualizing some data points", "import matplotlib.pyplot as pltx = [4, 5, 10, 4, \n  3, 11, 14 , 6, 10, 12]y = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\n  plt.scatter(x, y)plt.show()"], ["Machine Learning - K-means: ", "from sklearn.cluster import KMeans\n\ndata = list(zip(x, y))\ninertias = []\n\nfor i in range(1,11):\n\u00a0\u00a0\u00a0\u00a0kmeans = KMeans(n_clusters=i)\n\u00a0\u00a0\u00a0\u00a0kmeans.fit(data)\n\u00a0\u00a0\u00a0\u00a0inertias.append(kmeans.inertia_)\n\nplt.plot(range(1,11), inertias, marker='o')\nplt.title('Elbow method')\nplt.xlabel('Number of clusters')\nplt.ylabel('Inertia')\nplt.show()"], ["Machine Learning - K-means: ", "kmeans = KMeans(n_clusters=2)\nkmeans.fit(data)\n\nplt.scatter(x, y, c=kmeans.labels_)\nplt.show()"], ["Machine Learning - Bootstrap Aggregation (Bagging): Import the necessary data and evaluate base classifier performance", "from sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\n\ndata = datasets.load_wine(as_frame = True)\n\nX = data.data\ny = data.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22)\n\ndtree = DecisionTreeClassifier(random_state = 22)\ndtree.fit(X_train,y_train)\n\ny_pred = dtree.predict(X_test)\n\nprint(\"Train data accuracy:\",accuracy_score(y_true = y_train, y_pred = dtree.predict(X_train)))\nprint(\"Test data accuracy:\",accuracy_score(y_true = y_test, y_pred = y_pred))"], ["Machine Learning - Bootstrap Aggregation (Bagging): Import the necessary data and evaluate the BaggingClassifier performance", "import matplotlib.pyplot as plt\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import BaggingClassifier\n\ndata = datasets.load_wine(as_frame = True)\n\nX = data.data\ny = data.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22)\n\nestimator_range = [2,4,6,8,10,12,14,16]\n\nmodels = []\nscores = []\n\nfor n_estimators in estimator_range:\n\n\u00a0\u00a0\u00a0\u00a0# Create bagging classifier\n\u00a0\u00a0\u00a0\u00a0clf = BaggingClassifier(n_estimators = n_estimators, random_state = 22)\n\n\u00a0\u00a0\u00a0\u00a0# Fit the model\n\u00a0\u00a0\u00a0\u00a0clf.fit(X_train, y_train)\n\n\u00a0\u00a0\u00a0\u00a0# Append the model and score to their respective list\n\u00a0\u00a0\u00a0\u00a0models.append(clf)\n\u00a0\u00a0\u00a0\u00a0scores.append(accuracy_score(y_true = y_test, y_pred = clf.predict(X_test)))\n\n# Generate the plot of scores against number of estimators\nplt.figure(figsize=(9,6))\nplt.plot(estimator_range, scores)\n\n# Adjust labels and font (to make visable)\nplt.xlabel(\"n_estimators\", fontsize = 18)\nplt.ylabel(\"score\", fontsize = 18)\nplt.tick_params(labelsize = 16)\n\n# Visualize plot\nplt.show()"], ["Machine Learning - Bootstrap Aggregation (Bagging): Create a model with out-of-bag metric", "from sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import BaggingClassifier\n\ndata = datasets.load_wine(as_frame = True)\n\nX = data.data\ny = data.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22)\n\noob_model = BaggingClassifier(n_estimators = 12, oob_score = True,random_state = 22)\n\noob_model.fit(X_train, y_train)\n\nprint(oob_model.oob_score_)"], ["Machine Learning - Bootstrap Aggregation (Bagging): Generate Decision Trees from Bagging Classifie", "from sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import plot_tree\n\nX = data.data\ny = data.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 22)\n\nclf = BaggingClassifier(n_estimators = 12, oob_score = True,random_state = 22)\n\nclf.fit(X_train, y_train)\n\nplt.figure(figsize=(30, 20))\n\nplot_tree(clf.estimators_[0], feature_names = X.columns)"], ["Machine Learning - Cross Validation: Run k-fold CV", "from sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import KFold, cross_val_score\n\nX, y = datasets.load_iris(return_X_y=True)\n\nclf = DecisionTreeClassifier(random_state=42)\n\nk_folds = KFold(n_splits = 5)\n\nscores = cross_val_score(clf, X, y, cv = k_folds)\n\nprint(\"Cross Validation Scores: \", scores)\nprint(\"Average CV Score: \", scores.mean())\nprint(\"Number of CV Scores used in Average: \", len(scores))"], ["Machine Learning - Cross Validation: Example", "from sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score\n\nX, y = datasets.load_iris(return_X_y=True)\n\nclf = DecisionTreeClassifier(random_state=42)\n\nsk_folds = StratifiedKFold(n_splits = 5)\n\nscores = cross_val_score(clf, X, y, cv = sk_folds)\n\nprint(\"Cross Validation Scores: \", scores)\nprint(\"Average CV Score: \", scores.mean())\nprint(\"Number of CV Scores used in Average: \", len(scores))"], ["Machine Learning - Cross Validation: Run LOO CV", "from sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import LeaveOneOut, cross_val_score\n\nX, y = datasets.load_iris(return_X_y=True)\n\nclf = DecisionTreeClassifier(random_state=42)\n\nloo = LeaveOneOut()\n\nscores = cross_val_score(clf, X, y, cv = loo)\n\nprint(\"Cross Validation Scores: \", scores)\nprint(\"Average CV Score: \", scores.mean())\nprint(\"Number of CV Scores used in Average: \", len(scores))"], ["Machine Learning - Cross Validation: Run LPO CV", "from sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import LeavePOut, cross_val_score\n\nX, y = datasets.load_iris(return_X_y=True)\n\nclf = DecisionTreeClassifier(random_state=42)\n\nlpo = LeavePOut(p=2)\n\nscores = cross_val_score(clf, X, y, cv = lpo)\n\nprint(\"Cross Validation Scores: \", scores)\nprint(\"Average CV Score: \", scores.mean())\nprint(\"Number of CV Scores used in Average: \", len(scores))"], ["Machine Learning - Cross Validation: Run Shuffle Split CV", "from sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import ShuffleSplit, cross_val_score\n\nX, y = datasets.load_iris(return_X_y=True)\n\nclf = DecisionTreeClassifier(random_state=42)\n\nss = ShuffleSplit(train_size=0.6, test_size=0.3, n_splits = 5)\n\nscores = cross_val_score(clf, X, y, cv = ss)\n\nprint(\"Cross Validation Scores: \", scores)\nprint(\"Average CV Score: \", scores.mean())\nprint(\"Number of CV Scores used in Average: \", len(scores))"], ["Machine Learning - AUC - ROC Curve: Example", "import numpy as np\nfrom sklearn.metrics import accuracy_score, confusion_matrix, roc_auc_score, roc_curve\n\nn = 10000\nratio = .95\nn_0 = int((1-ratio) * n)\nn_1 = int(ratio * n)\n\ny = np.array([0] * n_0 + [1] * n_1)\n# below are the probabilities obtained from a hypothetical model that always predicts the majority class\n# probability of predicting class 1 is going to be 100%\ny_proba = np.array([1]*n)\ny_pred = y_proba > .5\n\nprint(f'accuracy score: {accuracy_score(y, y_pred)}')\ncf_mat = confusion_matrix(y, y_pred)\nprint('Confusion matrix')\nprint(cf_mat)\nprint(f'class 0 accuracy: {cf_mat[0][0]/n_0}')\nprint(f'class 1 accuracy: {cf_mat[1][1]/n_1}')"], ["Machine Learning - AUC - ROC Curve: Example", "# below are the probabilities obtained from a hypothetical model that doesn't always predict the mode\ny_proba_2 = np.array(\n\u00a0\u00a0\u00a0\u00a0np.random.uniform(0, .7, n_0).tolist() + \n\u00a0\u00a0\u00a0\u00a0np.random.uniform(.3, 1,  n_1).tolist()\n)\ny_pred_2 = y_proba_2 > .5\n\nprint(f'accuracy score: {accuracy_score(y, y_pred_2)}')\ncf_mat = confusion_matrix(y, y_pred_2)\nprint('Confusion matrix')\nprint(cf_mat)\nprint(f'class 0 accuracy: {cf_mat[0][0]/n_0}')\nprint(f'class 1 accuracy: {cf_mat[1][1]/n_1}')"], ["Machine Learning - AUC - ROC Curve: Model 1", "plot_roc_curve(y, y_proba)\nprint(f'model 1 AUC score: {roc_auc_score(y, y_proba)}')"], ["Machine Learning - AUC - ROC Curve: Model 2", "plot_roc_curve(y, y_proba_2)\nprint(f'model 2 AUC score: {roc_auc_score(y, y_proba_2)}')"], ["Machine Learning - AUC - ROC Curve: Example", "import numpy as np\n\nn = 10000\ny = np.array([0] * n + [1] * n)\n# \ny_prob_1 = np.array(\n\u00a0\u00a0\u00a0\u00a0np.random.uniform(.25, .5, n//2).tolist() + \n\u00a0\u00a0\u00a0\u00a0np.random.uniform(.3, .7, n).tolist() + \n\u00a0\u00a0\u00a0\u00a0np.random.uniform(.5, .75, n//2).tolist()\n)\ny_prob_2 = np.array(\n\u00a0\u00a0\u00a0\u00a0np.random.uniform(0, .4, n//2).tolist() + \n\u00a0\u00a0\u00a0\u00a0np.random.uniform(.3, .7, n).tolist() + \n\u00a0\u00a0\u00a0\u00a0np.random.uniform(.6, 1, n//2).tolist()\n)\n\nprint(f'model 1 accuracy score: {accuracy_score(y, y_prob_1>.5)}')\nprint(f'model 2 accuracy score: {accuracy_score(y, y_prob_2>.5)}')\n\nprint(f'model 1 AUC score: {roc_auc_score(y, y_prob_1)}')\nprint(f'model 2 AUC score: {roc_auc_score(y, y_prob_2)}')"], ["Machine Learning - AUC - ROC Curve: Plot model 1", "plot_roc_curve(y, y_prob_1)"], ["Machine Learning - AUC - ROC Curve: Plot model 2", "fpr, tpr, thresholds = roc_curve(y, y_prob_2)\nplt.plot(fpr, tpr)"], ["Machine Learning - K-nearest neighbors (KNN): Start by visualizing some data points", "import matplotlib.pyplot as plt\n\nx = [4, 5, 10, 4, 3, 11, 14 , 8, 10, 12]\ny = [21, 19, 24, 17, 16, 25, 24, 22, 21, 21]\nclasses = [0, 0, 1, 0, 0, 1, 1, 0, 1, 1]\n\nplt.scatter(x, y, c=classes)\nplt.show()"], ["Machine Learning - K-nearest neighbors (KNN): ", "new_x = 8\nnew_y = 21\nnew_point = [(new_x, new_y)]\n\nprediction = knn.predict(new_point)\n\nplt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])\nplt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")\nplt.show()"], ["Machine Learning - K-nearest neighbors (KNN): ", "knn = KNeighborsClassifier(n_neighbors=5)\n\nknn.fit(data, classes)\n\nprediction = knn.predict(new_point)\n\nplt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[0]])\nplt.text(x=new_x-1.7, y=new_y-0.7, s=f\"new point, class: {prediction[0]}\")\nplt.show()"], ["Python MySQL Create Database: Return a list of your system's databases", "import mysql.connectormydb = mysql.connector.connect(\u00a0 host=\"localhost\",\u00a0 \n  user=\"yourusername\",\u00a0 password=\"yourpassword\")mycursor = mydb.cursor()\n  mycursor.execute(\"SHOW DATABASES\")for x in mycursor:\u00a0 \n  print(x)"], ["Python MySQL Create Database: Try connecting to the database \"mydatabase\"", "import mysql.connectormydb = mysql.connector.connect(\u00a0 host=\"localhost\",\u00a0 \n  user=\"yourusername\",\u00a0 password=\"yourpassword\",\n\u00a0 \n  database=\"mydatabase\")"], ["Python MySQL Create Table: Return a list of your system's databases", "import mysql.connectormydb = mysql.connector.connect(\u00a0 host=\"localhost\",\u00a0 \n  user=\"yourusername\",\u00a0 password=\"yourpassword\",\u00a0 database=\"mydatabase\")mycursor = mydb.cursor()\n  mycursor.execute(\"SHOW TABLES\")for x in mycursor:\u00a0 \n  print(x)"], ["Python MySQL Create Table: Create primary key when creating the table", "import mysql.connectormydb = mysql.connector.connect(\u00a0 host=\"localhost\",\n  \u00a0\n  user=\"yourusername\",\u00a0 password=\"yourpassword\",\n  \u00a0 database=\"mydatabase\")mycursor = mydb.cursor()\nmycursor.execute(\"CREATE TABLE customers (id INT AUTO_INCREMENT \n  PRIMARY KEY, name VARCHAR(255), \n  address VARCHAR(255))\")"], ["Python MySQL Create Table: Create primary key on an existing table", "import mysql.connectormydb = mysql.connector.connect(\u00a0 host=\"localhost\",\n  \u00a0\n  user=\"yourusername\",\u00a0 password=\"yourpassword\",\n  \u00a0 database=\"mydatabase\")mycursor = mydb.cursor()\nmycursor.execute(\"ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT \n  PRIMARY KEY\")"], ["Python MySQL Insert Into Table: Fill the \"customers\" table with data", "import mysql.connectormydb = mysql.connector.connect(\u00a0 host=\"localhost\",\n  \u00a0\n  user=\"yourusername\",\u00a0 password=\"yourpassword\",\u00a0 database=\"mydatabase\")\nmycursor = mydb.cursor()sql = \"INSERT INTO customers (name, \n  address) VALUES (%s, %s)\"val = [\u00a0 ('Peter', 'Lowstreet 4'),\u00a0 \n  ('Amy', 'Apple st 652'),\u00a0 ('Hannah', 'Mountain 21'),\u00a0 \n  ('Michael', 'Valley 345'),\u00a0 ('Sandy', 'Ocean blvd 2'),\u00a0 \n  ('Betty', 'Green Grass 1'),\u00a0 ('Richard', 'Sky st 331'),\u00a0 \n  ('Susan', 'One way 98'),\u00a0 ('Vicky', 'Yellow Garden 2'),\u00a0 \n  ('Ben', 'Park Lane 38'),\u00a0 ('William', 'Central st 954'),\u00a0 \n  ('Chuck', 'Main Road 989'),\u00a0 ('Viola', 'Sideway 1633')]\n  mycursor.executemany(sql, val)mydb.commit()print(mycursor.rowcount, \"was inserted.\")"], ["Python MySQL Insert Into Table: Insert one row, and return the ID", "import mysql.connectormydb = mysql.connector.connect(\u00a0 host=\"localhost\",\n  \u00a0\n  user=\"yourusername\",\u00a0 password=\"yourpassword\",\u00a0 database=\"mydatabase\")\nmycursor = mydb.cursor()sql = \"INSERT INTO customers (name, \n  address) VALUES (%s, %s)\"val = (\"Michelle\", \"Blue Village\")\n  mycursor.execute(sql, val)mydb.commit()print(\"1 record \n  inserted, ID:\", mycursor.lastrowid)"], ["Python MySQL Select From: Select only the name and address columns", "import mysql.connectormydb = mysql.connector.connect(\u00a0 host=\"localhost\",\u00a0\n  user=\"yourusername\",\u00a0 password=\"yourpassword\",\u00a0 database=\"mydatabase\")\nmycursor = mydb.cursor()mycursor.execute(\"SELECT name, \n  address FROM \n  customers\")myresult = mycursor.fetchall()for x in myresult:\u00a0 \n  print(x)"], ["Python MySQL Select From: Fetch only one row", "import mysql.connectormydb = mysql.connector.connect(\u00a0 host=\"localhost\",\n  \u00a0\n  user=\"yourusername\",\u00a0 password=\"yourpassword\",\u00a0 database=\"mydatabase\")mycursor = \n  mydb.cursor()mycursor.execute(\"SELECT * FROM customers\")\n  myresult = mycursor.fetchone()print(myresult)"], ["Python MySQL Where: Select records where the address contains the word \"way\"", "import mysql.connectormydb = mysql.connector.connect(\u00a0 host=\"localhost\",\u00a0\n  user=\"yourusername\",\u00a0 password=\"yourpassword\",\u00a0 database=\"mydatabase\")\nmycursor = mydb.cursor()sql = \"SELECT * FROM customers WHERE address \n  LIKE '%way%'\"mycursor.execute(sql)myresult = mycursor.fetchall()for x in myresult:\u00a0 \n  print(x)"], ["Python MySQL Where: Escape query values by using the placholder %s \nmethod", "import mysql.connectormydb = mysql.connector.connect(\u00a0 host=\"localhost\",\u00a0\n  user=\"yourusername\",\u00a0 password=\"yourpassword\",\u00a0 database=\"mydatabase\")\nmycursor = mydb.cursor()sql = \"SELECT * FROM customers WHERE \n  address = %s\"adr = (\"Yellow Garden 2\", )\n  mycursor.execute(sql, adr)myresult = mycursor.fetchall()for x in myresult:\u00a0 \n  print(x)"], ["Python MySQL Order By: Sort the result reverse alphabetically by name", "import mysql.connectormydb = mysql.connector.connect(\u00a0 host=\"localhost\",\u00a0\n  user=\"yourusername\",\u00a0 password=\"yourpassword\",\u00a0 database=\"mydatabase\")\nmycursor = mydb.cursor()sql = \"SELECT * FROM customers ORDER BY \n  name DESC\"mycursor.execute(sql)myresult = mycursor.fetchall()for x in myresult:\u00a0 \n  print(x)"], ["Python MySQL Delete From By: Escape values by using the placeholder %s \nmethod", "import mysql.connectormydb = mysql.connector.connect(\u00a0 host=\"localhost\",\u00a0\n  user=\"yourusername\",\u00a0 password=\"yourpassword\",\u00a0 database=\"mydatabase\")\nmycursor = mydb.cursor()sql = \"DELETE FROM customers WHERE address = \n  %s\"adr = (\"Yellow Garden 2\", )\n  mycursor.execute(sql, adr)mydb.commit()print(mycursor.rowcount, \"record(s) deleted\")"], ["Python MySQL Drop Table: Delete the table \"customers\" if it exists", "import mysql.connectormydb = mysql.connector.connect(\u00a0 host=\"localhost\",\u00a0\n  user=\"yourusername\",\u00a0 password=\"yourpassword\",\u00a0 database=\"mydatabase\")\nmycursor = \n  mydb.cursor()sql = \"DROP TABLE IF EXISTS customers\"mycursor.execute(sql)"], ["Python MySQL Update Table: Escape values by using the placeholder %s \nmethod", "import mysql.connectormydb = mysql.connector.connect(\u00a0 host=\"localhost\",\u00a0\n  user=\"yourusername\",\u00a0 password=\"yourpassword\",\u00a0 database=\"mydatabase\")\nmycursor = mydb.cursor()sql = \"UPDATE customers SET address = %s \n  WHERE address = %s\"val = (\"Valley 345\", \"Canyon 123\")mycursor.execute(sql, \n  val)mydb.commit()print(mycursor.rowcount, \"record(s) \n  affected\")"], ["Python MongoDB Create Database: Create a database called \"mydatabase\"", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]"], ["Python MongoDB Create Database: Return a list of your system's databases", "print(myclient.list_database_names())"], ["Python MongoDB Create Database: Check if \"mydatabase\" exists", "dblist = myclient.list_database_names()if \"mydatabase\" in dblist:\u00a0 \n  print(\"The database exists.\")"], ["Python MongoDB Create Collection: Create a collection called \"customers\"", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]"], ["Python MongoDB Create Collection: Return a list of all collections in your database", "print(mydb.list_collection_names())"], ["Python MongoDB Create Collection: Check if the \"customers\" collection exists", "collist = mydb.list_collection_names()if \"customers\" in collist:\u00a0 \n  print(\"The collection exists.\")"], ["Python MongoDB Insert Document: Insert a record in the \"customers\" collection", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nmydict = { \"name\": \"John\", \"address\": \"Highway 37\" }\n  x =\n  mycol.insert_one(mydict)"], ["Python MongoDB Insert Document: Insert another record in the \"customers\" collection, and return the value of the\n_id field", "mydict = { \"name\": \"Peter\", \"address\": \"Lowstreet 27\" }\n  x = mycol.insert_one(mydict)print(x.inserted_id)"], ["Python MongoDB Insert Document: Example", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nmylist = [\u00a0 { \"name\": \"Amy\", \"address\": \"Apple st 652\"},\u00a0 \n    { \"name\": \"Hannah\", \"address\": \"Mountain 21\"},\u00a0 { \"name\": \n    \"Michael\", \"address\": \"Valley 345\"},\u00a0 { \"name\": \"Sandy\", \"address\": \n    \"Ocean blvd 2\"},\u00a0 { \"name\": \"Betty\", \"address\": \"Green Grass 1\"},\u00a0 \n    { \"name\": \"Richard\", \"address\": \"Sky st 331\"},\u00a0 { \"name\": \"Susan\", \n    \"address\": \"One way 98\"},\u00a0 { \"name\": \"Vicky\", \"address\": \"Yellow \n    Garden 2\"},\u00a0 { \"name\": \"Ben\", \"address\": \"Park Lane 38\"},\u00a0 \n    { \"name\": \"William\", \"address\": \"Central st 954\"},\u00a0 { \"name\": \n    \"Chuck\", \"address\": \"Main Road 989\"},\u00a0 { \"name\": \"Viola\", \n    \"address\": \"Sideway 1633\"}]x = mycol.insert_many(mylist)#print list of the _id values of the inserted \n    documents:print(x.inserted_ids)"], ["Python MongoDB Insert Document: Example", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nmylist = [\u00a0 { \"_id\": 1, \"name\": \"John\", \"address\": \"Highway 37\"},\u00a0 \n    { \"_id\": 2, \"name\": \"Peter\", \"address\": \"Lowstreet 27\"},\u00a0 { \"_id\": \n    3, \"name\": \"Amy\", \"address\": \"Apple st 652\"},\u00a0 { \"_id\": 4, \"name\": \n    \"Hannah\", \"address\": \"Mountain 21\"},\u00a0 { \"_id\": 5, \"name\": \n    \"Michael\", \"address\": \"Valley 345\"},\u00a0 { \"_id\": 6, \"name\": \"Sandy\", \n    \"address\": \"Ocean blvd 2\"},\u00a0 { \"_id\": 7, \"name\": \"Betty\", \n    \"address\": \"Green Grass 1\"},\u00a0 { \"_id\": 8, \"name\": \"Richard\", \n    \"address\": \"Sky st 331\"},\u00a0 { \"_id\": 9, \"name\": \"Susan\", \"address\": \n    \"One way 98\"},\u00a0 { \"_id\": 10, \"name\": \"Vicky\", \"address\": \"Yellow \n    Garden 2\"},\u00a0 { \"_id\": 11, \"name\": \"Ben\", \"address\": \"Park Lane \n    38\"},\u00a0 { \"_id\": 12, \"name\": \"William\", \"address\": \"Central st \n    954\"},\u00a0 { \"_id\": 13, \"name\": \"Chuck\", \"address\": \"Main Road 989\"},\u00a0 \n    { \"_id\": 14, \"name\": \"Viola\", \"address\": \"Sideway 1633\"}]x = mycol.insert_many(mylist)#print list of the _id values of the inserted \n    documents:print(x.inserted_ids)"], ["Python MongoDB Find: Find the first document in the customers collection", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nx = mycol.find_one()print(x)"], ["Python MongoDB Find: Return all documents in the \"customers\" collection, and print each document", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nfor x in mycol.find():\u00a0 print(x)"], ["Python MongoDB Find: Return only the names and addresses, not the _ids", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nfor x in mycol.find({},{ \"_id\": 0, \"name\": 1, \"address\": 1 }):\u00a0 \n    print(x)"], ["Python MongoDB Find: This example will exclude \"address\" from the result", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nfor x in mycol.find({},{ \"address\": 0 }):\u00a0 \n    print(x)"], ["Python MongoDB Find: You get an error if you specify both 0 and 1 values in the same object \n(except if one of the fields is the _id field)", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nfor x in mycol.find({},{ \"name\": 1, \"address\": 0 }):\u00a0 \n    print(x)"], ["Python MongoDB Query: Find document(s) with the address \"Park Lane 38\"", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nmyquery = { \"address\": \"Park Lane 38\" }\nmydoc = mycol.find(myquery)for x in mydoc:\u00a0 print(x)"], ["Python MongoDB Query: Find documents where the address starts with the letter \"S\" or \nhigher", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nmyquery = { \"address\": { \"$gt\": \"S\" } }mydoc = mycol.find(myquery)\nfor x in mydoc:\u00a0 print(x)"], ["Python MongoDB Query: Find documents where the address starts with the letter \"S\"", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nmyquery = { \"address\": { \"$regex\": \"^S\" } }mydoc = mycol.find(myquery)\nfor x in mydoc:\u00a0 print(x)"], ["Python MongoDB Sort: Sort the result alphabetically by name", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nmydoc = mycol.find().sort(\"name\")for x in mydoc:\u00a0 print(x)"], ["Python MongoDB Sort: Sort the result reverse alphabetically by name", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nmydoc = mycol.find().sort(\"name\", -1)for x in mydoc:\u00a0 print(x)"], ["Python MongoDB Delete Document: Delete the document with the address \"Mountain 21\"", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nmyquery = { \"address\": \"Mountain 21\" }\nmycol.delete_one(myquery)"], ["Python MongoDB Delete Document: Delete all documents were the address starts with the letter S", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nmyquery = { \"address\": {\"$regex\": \"^S\"} }\nx = mycol.delete_many(myquery)print(x.deleted_count, \" documents \n  deleted.\")"], ["Python MongoDB Delete Document: Delete all documents in the \"customers\" collection", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nx = mycol.delete_many({})print(x.deleted_count, \" documents \n  deleted.\")"], ["Python MongoDB Drop Collection: Delete the \"customers\" collection", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nmycol.drop()"], ["Python MongoDB Update: Change the address from \"Valley 345\" to \"Canyon 123\"", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nmyquery = { \"address\": \"Valley 345\" }newvalues = { \"$set\": { \n  \"address\": \"Canyon 123\" } }\nmycol.update_one(myquery, newvalues)#print \"customers\" after the update:for x in mycol.find():\u00a0 print(x)"], ["Python MongoDB Update: Update all documents where the address starts with the letter \"S\"", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nmyquery = { \"address\": { \"$regex\": \"^S\" } }newvalues = { \"$set\": { \n  \"name\": \"Minnie\" } }\nx = mycol.update_many(myquery, newvalues)print(x.modified_count, \"documents updated.\")"], ["Python MongoDB Limit: Limit the result to only return 5 documents", "import pymongomyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n  mydb = myclient[\"mydatabase\"]mycol = mydb[\"customers\"]\nmyresult = mycol.find().limit(5)#print the result:for x in myresult:\u00a0 print(x)"], ["Python Requests Module: Make a request to a web page, and print the response text", "import requestsx = requests.get('https://w3schools.com/python/demopage.htm')print(x.text)"], ["How to Remove Duplicates From a Python List: Remove any duplicates from a List", "mylist = [\"a\", \"b\", \"a\", \"c\", \"c\"]mylist = list(dict.fromkeys(mylist))\n  print(mylist)"], ["How to Remove Duplicates From a Python List: Example", "def my_function(x):\u00a0 return list(dict.fromkeys(x))mylist = \n  my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])\nprint(mylist)"], ["How to Reverse a String in Python: Reverse the string \"Hello World\"", "txt = \"Hello World\"[::-1]print(txt)"], ["How to Reverse a String in Python: Example", "def my_function(x):\u00a0 return x[::-1]mytxt = \n  my_function(\"I wonder how this text looks like backwards\")\nprint(mytxt)"], ["How to Add Two Numbers in Python: Example", "x = 5y = 10print(x + y)"], ["How to Add Two Numbers in Python: Example", "x = input(\"Type a number: \")y = input(\"Type another number: \")sum \n  = int(x) + int(y)print(\"The sum is: \", sum)"]]